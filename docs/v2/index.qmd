---
title: "Introduction"
---

[Gnuplot](http://www.gnuplot.info/) is a venerable (but actively
developed), very powerful and fast program for plotting.
[Julia](https://julialang.org) is a very powerful language for numerical
computing.  [Gaston](https://github.com/mbaz/Gaston.jl) is a package for
plotting Julia data and functions using gnuplot.

The following diagram illustrates how Gaston works. On the left there is a
gnuplot script; the equivalent Gaston function call is on the right.

![](assets/comparison.png)

The data to plot is in green color. In gnuplot, the data can be provided
inline as a _data block_ (as in this example), or it can be provided in a
separate file. Gaston can plot data stored in arrays (`x` and `y` in this
example). Gaston also supports recipes to plot arbitrary Julia types.

The lines in red specify the _axes settings_, affecting things like the
presence of a grid, the title, the legend box, tics positions/labels, etc.
Finally, in blue color, the _plot settings_ or _plotline_ specify the
properties of one specific curve within the axes (for example, the line
color, thickness and style, which marker to use, etc.)

There is a close correspondence between gnuplot and Gaston commands; in
fact, the main purpose of Gaston is to translate the Julia code on the
right to the gnuplot commands on the left. Gaston has two main features:

* It provides convenient, flexible syntax for plotting, along with common
  2-D and 3-D plot styles.
* It provides a simple mechanism to add user-defined recipes for plotting
  arbitrary Julia types.

Other features are:

* Support for plotting in separate GUI windows, in the terminal (with text
  or [sixels](https://en.wikipedia.org/wiki/Sixel)), in VS Code, or in
  notebooks (such as Jupyter and Pluto).
* Handling multiple co-existing interactive GUI plot windows.
* Support for (user-defined) themes.
* Convenient commands for common types of plots (like histograms, contour
  plots, surface plots, heatmaps, etcetera).
* Convenient syntax for creating multiplots and animations.
* Saving plots to multiple formats, including pdf, png and svg.
* Integrated color palettes from
  [ColorSchemes.jl](https://github.com/JuliaGraphics/ColorSchemes.jl).

::: {.callout-note}

This manual is for Gaston version 2. The manual for Gaston v1 (no longer
maintained) is [here](https://mbaz.github.io/Gaston.jl/v1/index.html).

:::

## Learning gnuplot

This documentation assumes at least a basic understanding of gnuplot. Some
pointers to get started with gnuplot are:

* The [official documentation](http://www.gnuplot.info/documentation.html).
* The [official list of tutorials](http://www.gnuplot.info/help.html).
* [Plotting data](http://www.gnuplotting.org/plotting-data/) article on
  [gnuplotting.org](http://www.gnuplotting.org/).
* [A blog post about Gaston by Julia
  Frank](https://juliaifrank.com/gnuplot-with-julia-for-beautiful-graphics/).
* Stackoverflow has a [gnuplot
  tag](https://stackoverflow.com/questions/tagged/gnuplot) with answers to
  more than 6,500 questions.

The following are interesting plot galleries:

* [Official gnuplot demo
  gallery](http://www.gnuplot.info/screenshots/index.html#demos).
* [Wikimedia commons
  gallery](https://commons.wikimedia.org/wiki/Category:Gnuplot_diagrams).
* [Nice collection of volumetric
  plots](https://ayapin-film.sakura.ne.jp/Gnuplot/pm3d.html).

## Installation

Gaston v2.x requires Julia version 1.8.0 or above (Gaston v1.x supports
Julia 1.6 and above), and has been tested with gnuplot versions 5 and 6.
You should manually install gnuplot on your system prior to using Gaston.
On Linux, it is highly recommended that you select a version with Qt
support: on Debian and Ubuntu, you will need `gnuplot-qt`. On Arch and its
derivatives, a simple `pacman -S gnuplot` suffices.

Gnuplot also supports Windows and Mac. This author does not use these systems
much, but it is said that gnuplot Windows executables are available at
[Sourceforge's gnuplot repository](https://sourceforge.net/projects/gnuplot/files/gnuplot/).
On Mac, gnuplot is supposed to be available using Homebrew.

To install Gaston from the Julia REPL, run
```julia
julia> ]add Gaston
```
Typing `]` switches the Julia REPL to the package manager, and the `add`
command installs the package. To exit the package manager, hit the backspace
key.
Load Gaston into your Julia session with
```julia
using Gaston
```

::: {.callout-note}
## Specifying the location of gnuplot

    The location of the gnuplot executable can be specified with the environmental variable
    `JULIA_GNUPLOT_EXE`. If gnuplot is in the system's path, setting this variable is not
    necessary.

:::

## Support

Here are some ideas on what to do if you need help with Gaston:

* Post a question in [Julia's discuss forum](https://discourse.julialang.org/tag/plotting)
  in the "plotting" category.
* Chat with the author (@mbaz) on [Julia's Zulip chat forum](https://julialang.zulipchat.com/),
  in the "plotting" or "helpdesk" channels.
* Bug reports, suggestions and pull requests are welcome at
  [Gaston's github page](https://github.com/mbaz/Gaston.jl).

## Contributing

Contributions are welcome! Examples of things you can do are bug reports,
improvements to the documentation, new examples and tutorials, and new features or
suggestions.

## Gnuplot startup file

Gnuplot reads and executes a startup file, if it exists, before every plot.
Since an un-configured gnuplot produces plots that are less than attractive,
the following minimum configuration is suggested (and was used to generate the
plots in this document):

    set linetype 1 lc rgb "blue" pt 3 ps 1.2
    set linetype 2 lc rgb "red" pt 4 ps 1.2
    set linetype 3 lc rgb "dark-green" pt 6 ps 1.2
    set linetype 4 lc rgb "orange-red" pt 12 ps 1.2
    set linetype 5 lc rgb "gold" pt 5 ps 1.2
    set linetype 6 lc rgb "dark-violet" pt 1 ps 1.2
    set linetype 7 lc rgb "gray50" pt 2 ps 1.2
    set linetype 8 lc rgb "black" pt 7 ps 1.2
    set linetype cycle 8
    set style data lines
    set key noautotitle
    set auto fix
    set offsets graph .05, graph .05, graph .05, graph .05

The configuration file is `~/.gnuplot` on Unix-like systems, and
`%APPDATA%\GNUPLOT.INI` on Windows.

## Next steps

* Read the [Tutorial](tutorial.qmd).
* See plot examples in the [Examples](examples.qmd) section.
* Learn how to extend Gaston to plot arbitrary Julia types in the [Recipes](recipes.qmd) section.
* Learn all the details about how to plot with Gaston in the [Manual](manual.qmd).
* Consult the full [API Reference](reference.qmd).

Gaston's documentation includes three [Pluto](https://plutojl.org/)
notebooks:

* An overview of the [essential plotting concepts](https://github.com/mbaz/Gaston.jl/tree/master/docs/v2/tutorial-essentials.jl).
* An overview of [3-D plotting](https://github.com/mbaz/Gaston.jl/tree/master/docs/v2/tutorial-3d.jl).
* A tutorial on how to [plot a torus](https://github.com/mbaz/Gaston.jl/tree/master/docs/how-to-plot-a-torus.jl) (which aims to showcase Gaston in interactive notebooks).

## Acknowledgments

When developing Gaston, I've been inspired by the excellent features and ideas
behind other Julia plotting packages, including
[Plots.jl](https://github.com/JuliaPlots/Plots.jl),
[Gnuplot.jl](https://github.com/gcalderone/Gnuplot.jl),
[PGFPlotsX.jl](https://github.com/KristofferC/PGFPlotsX.jl),
and [Makie.jl](https://github.com/MakieOrg/Makie.jl).
Many thanks to their multiple authors for freely sharing their code and their APIs!
