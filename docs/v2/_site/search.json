[
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "using QuadGK\nz = range(-5, 5, 200)\nfx(z) = sin(z^2)\nfy(z) = cos(z^2)\nx = [quadgk(fx, 0, t)[1] for t in z]\ny = [quadgk(fy, 0, t)[1] for t in z]\nsplot(\"\"\"unset zeroaxis\n         set tics border\n         set xyplane at -5 \n         set view 65,35\n         set border 4095\n         set xtics offset 0, -0.5\"\"\",\n         x, y, z, \"w l lc 'black' lw 1.5\")\n\n\n\n\n\n\n\n\n\n\n\nInspired by this Julia Discourse discussion.\n\nx = -15:0.1:15\ny = 0:30\nu1data = [exp(-(x-0.5*(y-15))^2) for x in x, y in y]\nZf = fill(0.0, length(x))\nf = Figure()\nGaston.set!(f(1), \"\"\"set zrange [0:1.5]\n               set tics out\n               set ytics border\n               set xyplane at 0\n               set view 45,17\n               set xlabel 'ξ'\n               set ylabel 't' offset -2.5\n               set zlabel '|u|' offset -0.85\n               set border 21\n               set size 1, 1.3\"\"\")\nfor i in reverse(eachindex(y))\n    Y = fill(y[i], length(x))\n    Z = u1data[:,i]\n    splot!(x, Y, Z, Zf, Z, \"w zerrorfill lc 'black' fillstyle solid 1.0 fc 'white'\")\nend\nf\n\n\n\n\n\n\n\n\n\n\n\n\nx = -2π:0.05:2π\n@plot {palette = :ice} x sin.(3x) x \"w l notitle lw 3 lc palette\"\n\n\n\n\n\n\n\n\n\n\n\n\nx = 0:0.1:6π\nsplot(\"unset colorbox\",\n      x, cos.(x), sin.(x), x./10,\n      \"w p\", \"ps variable\", \"pt 7\", \"lc palette\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npois(λ, k) = (λ^k)*exp(-λ)/factorial(k)\ns = \"set style fill transparent solid 0.4 noborder \\nset title 'Poisson PMF'\"\nplot(s, 0:15, k -&gt; pois(4, k), \"w filledcu x1 lc 'cyan' t 'λ = 4'\")\nplot!(0:15, k -&gt; pois(6, k), \"w filledcu x1 lc 'blue' t 'λ = 6'\")\nplot!(0:15, k -&gt; pois(8, k), \"w filledcu x1 lc 'pink' t 'λ = 8'\")\n\n\n\n\n\n\n\n\n\n\n\n\nx = range(-10, 10, 100)\ny1 = sin.(x) .- 0.5\ny2 = sin.(x) .+ 0.5\nplot(x, y1, y2, \"w filledcu lc 'turquoise'\")\n\n\n\n\n\n\n\n\n\n\n\n\nx = 0.:0.05:3;\ny = 0.:0.05:3;\nz = @. sin(x) * exp(-(x+y))\n@gpkw splot(:labels, {style = \"fill transparent solid 0.3\", xyplane = \"at 0\", grid, lt = :Set1_5},\n            x, y, z, z.*0, z,\n            \"w zerror t 'Data'\")\nsplot!(x.*0, y, z, \"w l lw 3\")\nsplot!(x, y.*0, z, \"w l lw 3\")\n\n\n\n\n\n\n\n\nHere, Set1_5 is a color scheme from ColorSchemes.jl.\n\n\n\n\n\n\n\nΘ = range(0, 2π, length = 100)\nΦ = range(0, π, length = 20)\nr = 0.8\nx = [r*cos(θ)*sin(ϕ) for θ in Θ, ϕ in Φ]\ny = [r*sin(θ)*sin(ϕ) for θ in Θ, ϕ in Φ]\nz = [r*cos(ϕ)        for θ in Θ, ϕ in Φ]\n@gpkw splot({view = \"equal xyz\", pm3d = \"depthorder\", hidden3d},\n            x, y, z,\n            {w = \"l\", lc = Q\"turquoise\"})\n\n\n\n\n\n\n\n\n\n\n\n\nΘ = range(0, 2π, length = 100)\nΦ = range(0, π, length = 100)\nr = 0.8\nx = [r*cos(θ)*sin(ϕ) for θ in Θ, ϕ in Φ]\ny = [r*sin(θ)*sin(ϕ) for θ in Θ, ϕ in Φ]\nz = [r*cos(ϕ)        for θ in Θ, ϕ in Φ]\n@splot({style = \"fill transparent solid 1\",\n        palette = :summer,\n        view = \"equal xyz\",\n        pm3d = \"depthorder\"},\n       x, y, z,\n       \"w pm3d\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nU = range(-π, π, length = 50)\nV = range(-π, π, length = 100)\nr = 0.5\nx = [1+cos(u)+r*cos(u)*cos(v) for u in U, v in V]\ny = [r*sin(v)                 for u in U, v in V]\nz = [sin(u)+r*sin(u)*cos(v)   for u in U, v in V]\nsettings = \"\"\"set object rectangle from screen 0,0 to screen 1,1 behind fillcolor 'black' fillstyle solid noborder\n              set pm3d depthorder\n              set style fill transparent solid 0.5\n              set pm3d lighting primary 0.05 specular 0.2\n              set view 108,2\n              unset border\n              set xyplane 0\n              unset tics\n              unset colorbox\"\"\"\n@splot(settings, {palette = :cool}, x, y, z, \"w pm3d\")\n\n\n\n\n\n\n\n\n\n\n\nU = LinRange(-π, pi, 100)\nV = LinRange(-π, pi, 20)\nx = [cos(u) + .5 * cos(u) * cos(v) for u in U, v in V]\ny = [sin(u) + .5 * sin(u) * cos(v) for u in U, v in V]\nz = [.5 * sin(v)                   for u in U, v in V]\n@gpkw surf({palette = :dense,\n        pm3d = \"depthorder\",\n        colorbox = false,\n        key = :false,\n        tics = :false,\n        border = 0,\n        view = \"60, 30, 1.5, 0.9\",\n        style = \"fill transparent solid 0.7\"},\n       x', y', z')\nx = [1 + cos(u) + .5 * cos(u) * cos(v) for u in U, v in V]\ny = [.5 * sin(v)                       for u in U, v in V]\nz = [sin(u) + .5 * sin(u) * cos(v)     for u in U, v in V]\nsurf!(x', y', z')\n\n\n\n\n\n\n\n\nSee more torus examples in the included Pluto notebook.\n\n\n\n\n\n\n\nx = y = -10:0.5:10\nf1(x, y) = cos.(x./2).*sin.(y./2)\nsurf(\"\"\"set hidden3d\n        set contour base\n        set cntrparam levels 10\n        unset key\"\"\",\n     x, y, f1,\n     \"lc 'turquoise'\")\n\n\n\n\n\n\n\n\n\n\n\n\nx = -1:0.05:1\ny = -1.5:0.05:2\negg(x,y) = x^2 + y^2/(1.4 + y/5)^2\nsegg = [egg(x,y) for x in x, y in y]\n@gpkw contour({palette = :cool,\n               cntrparam = \"levels incremental 0,0.01,1\",\n               auto = \"fix\",\n               xrange = (-1.2, 1.2),\n               yrange = (-1.5, 2),\n               cbrange = (0, 1),\n               xlabel = \"'x'\",\n               ylabel = \"'y'\",\n               size = \"ratio -1\"},\n              x, y, segg',\n              \"w l lc palette\",\n              labels = false)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU = range(0, 10π, length = 80)\nV = range(0, 2π, length = 10)\nx = [(1-0.1*cos(v))*cos(u)     for u in U, v in V]\ny = [(1-0.1*cos(v))*sin(u)     for u in U, v in V]\nz = [0.2*(sin(v) + u/1.7 - 10) for u in U, v in V]\nsettings = @gpkw {pm3d = \"depthorder\",\n                  style = \"fill transparent solid 1\",\n                  view = \"equal xyz\",\n                  xyplane = -0.05,\n                  palette = :ice,\n                  xrange = (-1.2, 1.2),\n                  yrange = (-1.2, 1.2),\n                  colorbox = false,\n                  hidden3d,\n                  view = (70, 79)}\n@splot(settings, x, y, z, \"w l lc 'turquoise'\")\n\n\n\n\n\n\n\n\n\n\n\n\n@splot(settings, x, y, z, \"w pm3d\")\n\n\n\n\n\n\n\n\n\n\n\n\nSource for this example.\n\n\n\n\nx = 10*rand(10)\ny = 10*rand(10)\nw = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\nplot(x, y, w, \"w labels\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis example is adapted from https://docs.makie.org/stable/#example. A few notes on the adaptation to Gaston:\n\nThe camera animation is achieved by changing the view setting every frame.\nEach frame, Npoints coordinates are added to the plot. The animation consists of Nframes frames.\nThe coloring of the attractor is different than in most 3-D plots. Normally, the color of a point depends on its z coordinate. In this case, the z coordinate is not an amplitude, since the curve lives in a state space. Therefore, the color palette will be applied along the length of the curve, with points nearer the start given colors at the start of the palette. To achieve this, we use ColorSchemes.resample to create a new palette with the same number of colors as there are points in the curve. Then, Gaston.hex is used to convert these colors to decimal numbers. Finally, the colors are used as a fourth column of data and the line color is set to lc rgb variable.\n\nusing ColorSchemes\n\nBase.@kwdef mutable struct Lorenz\n    dt::Float64 = 0.01\n    σ::Float64 = 10\n    ρ::Float64 = 28\n    β::Float64 = 8/3\n    x::Float64 = 1\n    y::Float64 = 1\n    z::Float64 = 1\nend\n\nfunction step!(l::Lorenz)\n    dx = l.σ * (l.y - l.x)\n    dy = l.x * (l.ρ - l.z) - l.y\n    dz = l.x * l.y - l.β * l.z\n    l.x += l.dt * dx\n    l.y += l.dt * dy\n    l.z += l.dt * dz\n    return (l.x, l.y, l.z)\nend\n\nNframes = 120\nNpoints = 50\nattractor = Lorenz()\nx = Float64[];\ny = Float64[];\nz = Float64[];\n\ns = @gpkw {xrange = (-30, 30),\n           yrange = (-30, 30),\n           zrange = (0, 60),\n           xtics = \"offset -1.2,0\",\n           xtics = \"add ('' -30, '' 30)\",\n           ytics = \"offset 1.2,0\",\n           ytics = \"add ('' -30, '' 30)\",\n           origin = \"-0.1, -0.1\",\n           size = \"1.2, 1.2\",\n           object = \"rectangle from screen 0,0 to screen 1,1 fillcolor 'black' behind\",\n           border = \"back lc rgb '#eeeeee' lt 1 lw 1.5\",\n           view = \"equal xyz\",\n           xyplane = \"at 0\"}\n\nf = splot(s, 1, 1, 1)\n\nfor i = 1:Nframes\n    for j = 1:Npoints\n        step!(attractor)\n        push!(x, attractor.x);\n        push!(y, attractor.y);\n        push!(z, attractor.z)\n    end\n    cs = resample(ColorSchemes.inferno, length(x))\n    splot(f[i],\n          s, \"set view 70, $(45 + 17 * sin(2pi * i / Nframes))\",\n          x, y, z, Gaston.hex(cs),\n          \"w l notitle lc rgb variable\")\nend\nsave(f, filename = \"lorenz.webp\", term = \"webp animate loop 0 size 640,480\")\n\n\n\n\nz = 0:0.1:10pi\nstep = 5\ncc = \"lc 'turquoise' lw 3 notitle\"\nac = @gpkw {zrange = (0,30), xrange = (-1.2, 1.2), yrange = (-1.2, 1.2)}\nF = scatter3(ac, :notics, :labels, cos.(z[1:step]), sin.(z[1:step]), z[1:step], cc)\nframe = Figure()\nfor i = 2:60\n    frame = scatter3(ac, :notics, :labels, cos.(z[1:i*step]), sin.(z[1:i*step]), z[1:i*step], cc)\n    push!(F, frame)\nend\nfor i = 60:-1:1\n    frame = scatter3(ac, :notics, :labels, cos.(z[1:i*step]), sin.(z[1:i*step]), z[1:i*step], cc)\n    push!(F, frame)\nend\nsave(F, filename = \"3dspiral.webp\", term = \"webp animate loop 0 size 640,480\")\n\n\n\n\nx = y = -15:0.4:15\nac = @gpkw {title = Q\"Splash\",\n            palette  = :cool,\n            cbrange  = (-0.2, 1),\n            zrange   = (-0.3, 1),\n            hidden3d = true}\nF = splot(ac, x, y, (x, y) -&gt; sin(sqrt(x*x+y*y))/sqrt(x*x+y*y), \"w pm3d\")\nframe = Figure()\nfor i = 1:-0.1:-1\n    frame = splot(ac, x, y, (x,y) -&gt; i*sin(sqrt(x*x+y*y))/sqrt(x*x+y*y), \"w pm3d\");\n    push!(F, frame)\nend\nfor i = -0.9:0.1:1\n    frame = splot(ac, x, y, (x,y) -&gt; i*sin(sqrt(x*x+y*y))/sqrt(x*x+y*y), \"w pm3d\");\n    push!(F, frame)\nend\nsave(F, filename = \"3dsplash.webp\", term = \"webp animate loop 0 size 640,480\")"
  },
  {
    "objectID": "examples.html#examples",
    "href": "examples.html#examples",
    "title": "Examples",
    "section": "",
    "text": "using QuadGK\nz = range(-5, 5, 200)\nfx(z) = sin(z^2)\nfy(z) = cos(z^2)\nx = [quadgk(fx, 0, t)[1] for t in z]\ny = [quadgk(fy, 0, t)[1] for t in z]\nsplot(\"\"\"unset zeroaxis\n         set tics border\n         set xyplane at -5 \n         set view 65,35\n         set border 4095\n         set xtics offset 0, -0.5\"\"\",\n         x, y, z, \"w l lc 'black' lw 1.5\")\n\n\n\n\n\n\n\n\n\n\n\nInspired by this Julia Discourse discussion.\n\nx = -15:0.1:15\ny = 0:30\nu1data = [exp(-(x-0.5*(y-15))^2) for x in x, y in y]\nZf = fill(0.0, length(x))\nf = Figure()\nGaston.set!(f(1), \"\"\"set zrange [0:1.5]\n               set tics out\n               set ytics border\n               set xyplane at 0\n               set view 45,17\n               set xlabel 'ξ'\n               set ylabel 't' offset -2.5\n               set zlabel '|u|' offset -0.85\n               set border 21\n               set size 1, 1.3\"\"\")\nfor i in reverse(eachindex(y))\n    Y = fill(y[i], length(x))\n    Z = u1data[:,i]\n    splot!(x, Y, Z, Zf, Z, \"w zerrorfill lc 'black' fillstyle solid 1.0 fc 'white'\")\nend\nf\n\n\n\n\n\n\n\n\n\n\n\n\nx = -2π:0.05:2π\n@plot {palette = :ice} x sin.(3x) x \"w l notitle lw 3 lc palette\"\n\n\n\n\n\n\n\n\n\n\n\n\nx = 0:0.1:6π\nsplot(\"unset colorbox\",\n      x, cos.(x), sin.(x), x./10,\n      \"w p\", \"ps variable\", \"pt 7\", \"lc palette\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npois(λ, k) = (λ^k)*exp(-λ)/factorial(k)\ns = \"set style fill transparent solid 0.4 noborder \\nset title 'Poisson PMF'\"\nplot(s, 0:15, k -&gt; pois(4, k), \"w filledcu x1 lc 'cyan' t 'λ = 4'\")\nplot!(0:15, k -&gt; pois(6, k), \"w filledcu x1 lc 'blue' t 'λ = 6'\")\nplot!(0:15, k -&gt; pois(8, k), \"w filledcu x1 lc 'pink' t 'λ = 8'\")\n\n\n\n\n\n\n\n\n\n\n\n\nx = range(-10, 10, 100)\ny1 = sin.(x) .- 0.5\ny2 = sin.(x) .+ 0.5\nplot(x, y1, y2, \"w filledcu lc 'turquoise'\")\n\n\n\n\n\n\n\n\n\n\n\n\nx = 0.:0.05:3;\ny = 0.:0.05:3;\nz = @. sin(x) * exp(-(x+y))\n@gpkw splot(:labels, {style = \"fill transparent solid 0.3\", xyplane = \"at 0\", grid, lt = :Set1_5},\n            x, y, z, z.*0, z,\n            \"w zerror t 'Data'\")\nsplot!(x.*0, y, z, \"w l lw 3\")\nsplot!(x, y.*0, z, \"w l lw 3\")\n\n\n\n\n\n\n\n\nHere, Set1_5 is a color scheme from ColorSchemes.jl.\n\n\n\n\n\n\n\nΘ = range(0, 2π, length = 100)\nΦ = range(0, π, length = 20)\nr = 0.8\nx = [r*cos(θ)*sin(ϕ) for θ in Θ, ϕ in Φ]\ny = [r*sin(θ)*sin(ϕ) for θ in Θ, ϕ in Φ]\nz = [r*cos(ϕ)        for θ in Θ, ϕ in Φ]\n@gpkw splot({view = \"equal xyz\", pm3d = \"depthorder\", hidden3d},\n            x, y, z,\n            {w = \"l\", lc = Q\"turquoise\"})\n\n\n\n\n\n\n\n\n\n\n\n\nΘ = range(0, 2π, length = 100)\nΦ = range(0, π, length = 100)\nr = 0.8\nx = [r*cos(θ)*sin(ϕ) for θ in Θ, ϕ in Φ]\ny = [r*sin(θ)*sin(ϕ) for θ in Θ, ϕ in Φ]\nz = [r*cos(ϕ)        for θ in Θ, ϕ in Φ]\n@splot({style = \"fill transparent solid 1\",\n        palette = :summer,\n        view = \"equal xyz\",\n        pm3d = \"depthorder\"},\n       x, y, z,\n       \"w pm3d\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nU = range(-π, π, length = 50)\nV = range(-π, π, length = 100)\nr = 0.5\nx = [1+cos(u)+r*cos(u)*cos(v) for u in U, v in V]\ny = [r*sin(v)                 for u in U, v in V]\nz = [sin(u)+r*sin(u)*cos(v)   for u in U, v in V]\nsettings = \"\"\"set object rectangle from screen 0,0 to screen 1,1 behind fillcolor 'black' fillstyle solid noborder\n              set pm3d depthorder\n              set style fill transparent solid 0.5\n              set pm3d lighting primary 0.05 specular 0.2\n              set view 108,2\n              unset border\n              set xyplane 0\n              unset tics\n              unset colorbox\"\"\"\n@splot(settings, {palette = :cool}, x, y, z, \"w pm3d\")\n\n\n\n\n\n\n\n\n\n\n\nU = LinRange(-π, pi, 100)\nV = LinRange(-π, pi, 20)\nx = [cos(u) + .5 * cos(u) * cos(v) for u in U, v in V]\ny = [sin(u) + .5 * sin(u) * cos(v) for u in U, v in V]\nz = [.5 * sin(v)                   for u in U, v in V]\n@gpkw surf({palette = :dense,\n        pm3d = \"depthorder\",\n        colorbox = false,\n        key = :false,\n        tics = :false,\n        border = 0,\n        view = \"60, 30, 1.5, 0.9\",\n        style = \"fill transparent solid 0.7\"},\n       x', y', z')\nx = [1 + cos(u) + .5 * cos(u) * cos(v) for u in U, v in V]\ny = [.5 * sin(v)                       for u in U, v in V]\nz = [sin(u) + .5 * sin(u) * cos(v)     for u in U, v in V]\nsurf!(x', y', z')\n\n\n\n\n\n\n\n\nSee more torus examples in the included Pluto notebook.\n\n\n\n\n\n\n\nx = y = -10:0.5:10\nf1(x, y) = cos.(x./2).*sin.(y./2)\nsurf(\"\"\"set hidden3d\n        set contour base\n        set cntrparam levels 10\n        unset key\"\"\",\n     x, y, f1,\n     \"lc 'turquoise'\")\n\n\n\n\n\n\n\n\n\n\n\n\nx = -1:0.05:1\ny = -1.5:0.05:2\negg(x,y) = x^2 + y^2/(1.4 + y/5)^2\nsegg = [egg(x,y) for x in x, y in y]\n@gpkw contour({palette = :cool,\n               cntrparam = \"levels incremental 0,0.01,1\",\n               auto = \"fix\",\n               xrange = (-1.2, 1.2),\n               yrange = (-1.5, 2),\n               cbrange = (0, 1),\n               xlabel = \"'x'\",\n               ylabel = \"'y'\",\n               size = \"ratio -1\"},\n              x, y, segg',\n              \"w l lc palette\",\n              labels = false)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nU = range(0, 10π, length = 80)\nV = range(0, 2π, length = 10)\nx = [(1-0.1*cos(v))*cos(u)     for u in U, v in V]\ny = [(1-0.1*cos(v))*sin(u)     for u in U, v in V]\nz = [0.2*(sin(v) + u/1.7 - 10) for u in U, v in V]\nsettings = @gpkw {pm3d = \"depthorder\",\n                  style = \"fill transparent solid 1\",\n                  view = \"equal xyz\",\n                  xyplane = -0.05,\n                  palette = :ice,\n                  xrange = (-1.2, 1.2),\n                  yrange = (-1.2, 1.2),\n                  colorbox = false,\n                  hidden3d,\n                  view = (70, 79)}\n@splot(settings, x, y, z, \"w l lc 'turquoise'\")\n\n\n\n\n\n\n\n\n\n\n\n\n@splot(settings, x, y, z, \"w pm3d\")\n\n\n\n\n\n\n\n\n\n\n\n\nSource for this example.\n\n\n\n\nx = 10*rand(10)\ny = 10*rand(10)\nw = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\nplot(x, y, w, \"w labels\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis example is adapted from https://docs.makie.org/stable/#example. A few notes on the adaptation to Gaston:\n\nThe camera animation is achieved by changing the view setting every frame.\nEach frame, Npoints coordinates are added to the plot. The animation consists of Nframes frames.\nThe coloring of the attractor is different than in most 3-D plots. Normally, the color of a point depends on its z coordinate. In this case, the z coordinate is not an amplitude, since the curve lives in a state space. Therefore, the color palette will be applied along the length of the curve, with points nearer the start given colors at the start of the palette. To achieve this, we use ColorSchemes.resample to create a new palette with the same number of colors as there are points in the curve. Then, Gaston.hex is used to convert these colors to decimal numbers. Finally, the colors are used as a fourth column of data and the line color is set to lc rgb variable.\n\nusing ColorSchemes\n\nBase.@kwdef mutable struct Lorenz\n    dt::Float64 = 0.01\n    σ::Float64 = 10\n    ρ::Float64 = 28\n    β::Float64 = 8/3\n    x::Float64 = 1\n    y::Float64 = 1\n    z::Float64 = 1\nend\n\nfunction step!(l::Lorenz)\n    dx = l.σ * (l.y - l.x)\n    dy = l.x * (l.ρ - l.z) - l.y\n    dz = l.x * l.y - l.β * l.z\n    l.x += l.dt * dx\n    l.y += l.dt * dy\n    l.z += l.dt * dz\n    return (l.x, l.y, l.z)\nend\n\nNframes = 120\nNpoints = 50\nattractor = Lorenz()\nx = Float64[];\ny = Float64[];\nz = Float64[];\n\ns = @gpkw {xrange = (-30, 30),\n           yrange = (-30, 30),\n           zrange = (0, 60),\n           xtics = \"offset -1.2,0\",\n           xtics = \"add ('' -30, '' 30)\",\n           ytics = \"offset 1.2,0\",\n           ytics = \"add ('' -30, '' 30)\",\n           origin = \"-0.1, -0.1\",\n           size = \"1.2, 1.2\",\n           object = \"rectangle from screen 0,0 to screen 1,1 fillcolor 'black' behind\",\n           border = \"back lc rgb '#eeeeee' lt 1 lw 1.5\",\n           view = \"equal xyz\",\n           xyplane = \"at 0\"}\n\nf = splot(s, 1, 1, 1)\n\nfor i = 1:Nframes\n    for j = 1:Npoints\n        step!(attractor)\n        push!(x, attractor.x);\n        push!(y, attractor.y);\n        push!(z, attractor.z)\n    end\n    cs = resample(ColorSchemes.inferno, length(x))\n    splot(f[i],\n          s, \"set view 70, $(45 + 17 * sin(2pi * i / Nframes))\",\n          x, y, z, Gaston.hex(cs),\n          \"w l notitle lc rgb variable\")\nend\nsave(f, filename = \"lorenz.webp\", term = \"webp animate loop 0 size 640,480\")\n\n\n\n\nz = 0:0.1:10pi\nstep = 5\ncc = \"lc 'turquoise' lw 3 notitle\"\nac = @gpkw {zrange = (0,30), xrange = (-1.2, 1.2), yrange = (-1.2, 1.2)}\nF = scatter3(ac, :notics, :labels, cos.(z[1:step]), sin.(z[1:step]), z[1:step], cc)\nframe = Figure()\nfor i = 2:60\n    frame = scatter3(ac, :notics, :labels, cos.(z[1:i*step]), sin.(z[1:i*step]), z[1:i*step], cc)\n    push!(F, frame)\nend\nfor i = 60:-1:1\n    frame = scatter3(ac, :notics, :labels, cos.(z[1:i*step]), sin.(z[1:i*step]), z[1:i*step], cc)\n    push!(F, frame)\nend\nsave(F, filename = \"3dspiral.webp\", term = \"webp animate loop 0 size 640,480\")\n\n\n\n\nx = y = -15:0.4:15\nac = @gpkw {title = Q\"Splash\",\n            palette  = :cool,\n            cbrange  = (-0.2, 1),\n            zrange   = (-0.3, 1),\n            hidden3d = true}\nF = splot(ac, x, y, (x, y) -&gt; sin(sqrt(x*x+y*y))/sqrt(x*x+y*y), \"w pm3d\")\nframe = Figure()\nfor i = 1:-0.1:-1\n    frame = splot(ac, x, y, (x,y) -&gt; i*sin(sqrt(x*x+y*y))/sqrt(x*x+y*y), \"w pm3d\");\n    push!(F, frame)\nend\nfor i = -0.9:0.1:1\n    frame = splot(ac, x, y, (x,y) -&gt; i*sin(sqrt(x*x+y*y))/sqrt(x*x+y*y), \"w pm3d\");\n    push!(F, frame)\nend\nsave(F, filename = \"3dsplash.webp\", term = \"webp animate loop 0 size 640,480\")"
  },
  {
    "objectID": "reference.html",
    "href": "reference.html",
    "title": "API Reference",
    "section": "",
    "text": "TODO: add plotwithtable, meshgrid"
  },
  {
    "objectID": "reference.html#types-and-constructors",
    "href": "reference.html#types-and-constructors",
    "title": "API Reference",
    "section": "Types and constructors",
    "text": "Types and constructors\n\n\n\n\n\n\nFigure\n\n\n\nFigure\nType that stores a figure. It has the following fields:\n\nhandle: the figure’s unique identifier (it may be of any type).\ngp_proc: the gnuplot process associated with the figure (type Base.Process).\naxes: a vector of Gaston.Axis.\nmultiplot: a string with arguments to set multiplot.\nautolayout: true if Gaston should handle the figure’s layout (Bool).\n\nFigure(h = nothing, autolayout = true, multiplot = \"\")::Figure\nReturn an empty a figure with given handle. If h === nothing, automatically assign the next available numerical handle. A new gnuplot process is started and associated with the new figure, which becomes the active figure.\nIf the handle provided already exists, an error is thrown.\nExamples\nfig = Figure()   # new figure with next available numerical handle\nfig = Figure(5)  # new figure with handle 5 (if it was available)\nfig = Figure(multiplot = \"'title 'test'\") # new figure with multiplot settings\n(f::Figure)(index)::Gaston.Axis\nReturn the axis stored at the specified index. If the axis does not exist, an empty axis is created."
  },
  {
    "objectID": "reference.html#plot-commands",
    "href": "reference.html#plot-commands",
    "title": "API Reference",
    "section": "Plot commands",
    "text": "Plot commands\n\n\n\n\n\n\nplot\n\n\n\nplot([f::Figure,] [indexed figure,], [settings...,] data..., [plotline...,] [kwargs...])::Figure\nPlot the provided data, returning a figure.\nArguments (in order from left to right):\n\nf::Figure (optional). If a figure f is given as argument, the figure is reset (all previous axes are removed), and the new plot is created in the first axis of f.\nAn indexed figure (e.g. f[3]) (optional). The axis at the given index is cleared (or created if it does not exist), and the plot is added to it.\nAxis settings (optional, default \"\"). See documentation for details on how to specify these settings.\nThe data to be plotted. Data may be provided as vectors, ranges, matrices, functions, etcetera (see documentation).\nA plotline (optional, default \"\") specifiying the plot formatting. See documentation for details on how to specify these settings.\n\nThe figure to use for plotting may also be specified using the keyword argument handle. Other keyword arguments are passed to convert_args, documented under Recipes.\nExamples\nplot(1:10) # A simple plot\nplot(\"set title 'test'}, 1:10)  # Configure the axes\nplot(\"set title 'test'}, 1:10, \"w p\")  # Configure the axes and plotline\nplot(sin)  # plot the sine function from -10 to 10\nplot(0:0.01:1, sin) # plot the sine function at the given time instants\nSee also plot! and splot.\nplot(f1::Figure, f2::Figure, ... ; kwargs...)::Figure\nReturn a new figure whose axes come from the figures provided in the arguments.\n\n\n\n\n\n\n\n\npush!\n\n\n\npush!(f1::Figure, f2::Figure; index = 1)::Figure\nInserts the Axis of figure f2 at the given index into Figure f1.\nExample\nf1 = plot(sin)\nf2 = Figure()\nhistogram(randn(100), bins = 10)  # plots on f2\npush!(f1, f2)  # insert the histogram as second axis of f1\n\n\n\n\n\n\n\n\nplot!\n\n\n\nplot!(...)::Figure\nSimilar to plot, but adds a new curve to an axis. If the axis does not exist, it is created. However, plot! does not support specification of the axis settings.\nExamples\nplot(1:10)        # plot a curve\nplot!((1:10.^2))  # add a second curve\nf = plot(sin)     # store new plot in f\nplot!(f, cos)     # add second curve to plot\nSee documentation to plot for more details.\n\n\n\n\n\n\n\n\nsplot\n\n\n\nsplot(...)::Figure\nSimilar to plot, but creates a 3D plot.\nExample\nsplot(-1:0.1:1, -1:0.1:1, (x,y)-&gt;sin(x)*cos(y)) # Plot an equation in the specified range\nSee documentation to plot for more details.\n\n\n\n\n\n\n\n\nsplot!\n\n\n\nsplot!(...) -&gt; Figure\nSimilar to splot, but adds a new surface to an existing plot.\nSee documentation to plot! for more details.\n\n\n\n\n\n\n\n\n@plot\n\n\n\n@plot args...\n@plot provides an alternative syntax for plotting. The arguments are interpreted similarly to plot: first, a figure or axis may be specified; then, data is provided, and finally a plotline may be given. This macro allows specifying gnuplot settings as setting = value, which is converted to set setting value before passing it to gnuplot. These key, value pairs must be surrounded by curly brackets.\nExamples\n# Plot a sine wave with title `example` and with a grid, with a red line\n@plot {title = \"'example'\", grid = true} sin {lc = 'red'}\nIn this example, grid = true is converted to set grid. To disable a setting, use (for example) grid = false (converted to unset grid).\n\n\n\n\n\n\n\n\n@plot!\n\n\n\n@plot! args...\nAlternative Convenient syntax for plot!. See the documentation for @plot.\n\n\n\n\n\n\n\n\n@splot\n\n\n\n@splot args...\nAlternative Convenient syntax for splot. See the documentation for @plot.\n\n\n\n\n\n\n\n\n@splot!\n\n\n\n@splot! args...\nAlternative Convenient syntax for splot!. See the documentation for @plot.\n\n\n\nPlotting with built-in themes\nThese functions call plot behind the scenes, with settings and plotline taken from a built-in theme.\n\n\n\n\n\n\nscatter\n\n\n\nscatter(args...; kwargs...)::Figure\nGenerate a scatter plot with built-in plotline theme scatter.\nSee the plot documentation for more information on the arguments.\n\n\n\n\n\n\n\n\nscatter!\n\n\n\nscatter!(args...; kwargs...)::Figure\nInsert a scatter plot. See the scatter documentation for more details.\n\n\n\n\n\n\n\n\nstem\n\n\n\nstem(args...; onlyimpulses::Bool = false, color = \"'blue'\", kwargs...)::Figure\nGenerate a stem plot with built-in plotline themes impulses and stem.\nThis function takes the following keyword arguments:\n\nonlyimpulses: if true, plot using only impulses and omit the dots.\ncolor: specify line color to use. If not specified, the impulses and the dots may be plotted with different colors.\n\nSee the plot documentation for more information on the arguments.\n\n\n\n\n\n\n\n\nstem!\n\n\n\nstem!(args... ; onlyimpulses = false, color = \"'blue'\", kwargs...)::Figure\nInsert a stem plot. See the stem documentation for more details.\n\n\n\n\n\n\n\n\nbar\n\n\n\nbar(args...; kwargs...)::Figure\nGenerate a bar plot with built-in settings theme boxplot and plotline theme box. See the plot documentation for more information on the arguments.\n\n\n\n\n\n\n\n\nbar!\n\n\n\nbar!(args...; kwargs...)::Figure\nInsert a bar plot. See the bar documentation for more details.\n\n\n\n\n\n\n\n\nbarerror\n\n\n\nbarerror(args...; kwargs...)::Figure\nGenerate a barerror plot with built-in settings theme boxplot and plotline theme boxerror. See the plot documentation for more information on the arguments.\n\n\n\n\n\n\n\n\nbarerror!\n\n\n\nbarerror!(args...; kwargs...)::Figure\nInsert a barerror plot. See the barerror documentation for more details.\n\n\n\n\n\n\n\n\nhistogram\n\n\n\nhistogram(args...,[bins = 10,] [mode = :pdf,] [edges = nothing,] [horizontal = false]; kwargs...)::Figure\nPlot a histogram of the provided data, using StatsBase.fit. This function takes the following keyword arguments:\n\nbins specifies the number of bins (default 10)\nmode specifies how the histogram area is normalized (see StatsBase.fit)\n\n\n\n\n\n\n\n\n\nimagesc\n\n\n\nimagesc(args...; kwargs...)::Figure\nPlot an array as an image. If the array is a matrix, a grayscale image is assumed. If the given array z is three-dimensional, an rgbimage is assumed, with z[1,:,:] the red channel, z[2,:,:] the blue channel, and z[3,:,:] the blue channel.\nSee the documentation to plot for more details.\n\n\n\n\n\n\n\n\nsurf\n\n\n\nsurf(args...; kwargs...)::Figure\nPlot the provided data as a surface, using the settings theme hidden3d and the plotline theme pm3d.\nSee the plot documentation for more information on the arguments.\n\n\n\n\n\n\n\n\nsurf!\n\n\n\nsurf!(args...; kwargs...)::Figure\nInsert a surface plot. See the surf documentation for more details.\n\n\n\n\n\n\n\n\nscatter3\n\n\n\nscatter3(args...; kwargs...)::Figure\nGenerate a scatter plot of the provided data, using the settings theme scatter3 and the plotline theme scatter.\nSee the plot documentation for more information on the arguments.\n\n\n\n\n\n\n\n\nscatter3\n\n\n\nscatter3!(args...; kwargs...)::Figure\nInsert a scatter plot. See the scatter3 documentation for more details.\n\n\n\n\n\n\n\n\nwireframe\n\n\n\nwireframe(args...; kwargs...)::Figure\nPlot the provided data using a wireframe, using the settings theme hidden3d.\nSee the plot documentation for more information on the arguments.\n\n\n\n\n\n\n\n\nwireframe!\n\n\n\nwireframe!(args...; kwargs...)::Figure\nInsert a wireframe plot. See the wireframe documentation for more details.\n\n\n\n\n\n\n\n\nwiresurf\n\n\n\nwiresurf(args...; kwargs...)::Figure\nPlot the provided data as a surface with a superimposed wireframe, using the settings theme wiresurf.\nSee the plot documentation for more information on the arguments.\n\n\n\n\n\n\n\n\nwiresurf!\n\n\n\nwiresurf!(args...; kwargs...)::Figure\nInsert a wiresurf plot. See the wiresurf documentation for more details.\n\n\n\n\n\n\n\n\nsurfcontour\n\n\n\nsurfcontour(args...; [labels::Bool = true,] kwargs...)::Figure\nPlot the provided data as a surface with contour lines at the base, using the settings theme contourproj and the plotline theme labels.\nIf the keyword argument labels is true, then numerical labels are added to the contour lines.\nSee the plot documentation for more information on the arguments.\n\n\n\n\n\n\n\n\ncontour\n\n\n\ncontour(args...; [labels::Bool = true,] kwargs...)::Figure\nPlot the provided data using contour lines, with settings themes countour and labels.\nIf the keyword argument labels is true, then the contour lines are labeled. See the documentation to plot for more details.\n\n\n\n\n\n\n\n\nheatmap\n\n\n\nheatmap(args...; kwargs...)\nPlot the data provided as a heatmap, using the settings theme heatmap and the plotline theme pm3d.\nSee the documentation to plot for more details."
  },
  {
    "objectID": "reference.html#recipes",
    "href": "reference.html#recipes",
    "title": "API Reference",
    "section": "Recipes",
    "text": "Recipes\n\n\n\n\n\n\nGaston.convert_args\n\n\n\nconvert_args(args...)\nConvert values of specific types to data that gnuplot can plot.\nUsers should add methods to this function for their own types. The returned value must be one of the following types:\n\nA Gaston.Plot, which describes a curve (i.e. it contains coordinates and a plotline).\nA Gaston.Axis, which may contain multiple Plots and axis settings.\nA tuple with the following fields:\n\naxes: a vector of Gaston.Axis\nmultiplot, a string to be passed to set multiplot\nautolayout::Bool, set to true if Gaston should control the axes layout.\n\n\nSee the Gaston documentation for full details and examples.\nTo add a recipe for 3-D plotting, use convert_args3.\n\n\n\n\n\n\n\n\nGaston.convert_args3\n\n\n\nconvert_args3(args...)\nConvert values of specific types to data that gnuplot can plot using splot.\nSee documentation for convert_args for more details."
  },
  {
    "objectID": "reference.html#figure-management",
    "href": "reference.html#figure-management",
    "title": "API Reference",
    "section": "Figure management",
    "text": "Figure management\n\n\n\n\n\n\nfigure\n\n\n\nfigure(handle = &lt;active figure handle&gt; ; index = nothing)::Figure\nReturn specified figure (by handle or index) and make it the active figure.\nIf no arguments are given, the current active figure is returned.\n\n\n\n\n\n\n\n\nclosefigure\n\n\n\nclosefigure(h = nothing)::Nothing\nClose figure with handle h. If no arguments are given, the active figure is closed. The most recent remaining figure (if any) is made active.\nThe associated gnuplot process is also terminated.\nExamples\nplot(sin, handle = :first);\nplot(cos, handle = :second);\nplot(tan, handle = :third);\nclosefigure()        # close figure with handle `:third`\nclosefigure(:first)  # close figure with handle `:first`\nclosefigure()        # close figure with handle `:second`\nclosefigure(fig::Figure)::Nothing\nCloses the specified figure. The associated gnuplot process is also terminated.\nExample\np = plot(1:10);\nclosefigure(p)\n\n\n\n\n\n\n\n\ncloseall\n\n\n\ncloseall()::Nothing\nClose all existing figures."
  },
  {
    "objectID": "reference.html#utility-macros",
    "href": "reference.html#utility-macros",
    "title": "API Reference",
    "section": "Utility macros",
    "text": "Utility macros\n\n\n\n\n\n\n@Q_str\n\n\n\n@Q_str\nInserts single quotation marks around a string.\nWhen passing options to gnuplot, some arguments should be quoted and some should not. For example:\n\nset title Example    # gnuplot errors\nset title 'Example'  # the title must be quoted\nset pointtype 7      # the point type is not quoted\n\nGaston allows setting options using keyword arguments:\n@plot {title = \"Example\"} x y  # converted to \"set title Example\"\nHere, the keyword argument should be {title = \"'Example'\"}, which is correctly converted to set title 'Example'. To avoid having to type the single quotes, this macro allows us to write:\n@plot {title = Q\"Example\"} x y  # converted to \"set title 'Example'\"\n\n\n\n\n\n\n\n\n@gpkw\n\n\n\n@gpkw\nConvert a variable number of keyword arguments to a vector of pairs of strings.\nExample\njulia&gt; @gpkw {title = Q\"Example\", grid = true}\n2-element Vector{Pair}:\n \"title\" =&gt; \"'Example'\"\n  \"grid\" =&gt; true"
  },
  {
    "objectID": "reference.html#saving-plots",
    "href": "reference.html#saving-plots",
    "title": "API Reference",
    "section": "Saving plots",
    "text": "Saving plots\n\n\n\n\n\n\nsave\n\n\n\nsave(f::Figure = figure(); filename = nothing, term = \"pngcairo font ',7'\")::Nothing\nSave figure f using the specified terminal term and filename.\nIf filename is not provided, the filename used is \"figure-handle.ext, where handle = f.handle and ext is given by the first three characters of the current terminal.\nsave(handle; filename = nothing, term = \"pngcairo font ',7'\")::Nothing\nSave the figure with the given handle."
  },
  {
    "objectID": "reference.html#animations",
    "href": "reference.html#animations",
    "title": "API Reference",
    "section": "Animations",
    "text": "Animations\n\n\n\n\n\n\nanimate\n\n\n\nanimate(f::Figure, term = config.altterm)\nRender an animated plot in notebooks such as Pluto and Jupyter.\nThis function is meant to be used to render an animation within a notebook environment. Normally, all plots are rendered in a terminal such as png. However, rendering an animation requires switching to gif, webp or other terminal that supports animations. Changing the global terminal configuration wil cause all other plots in the notebook to be re-rendered with the wrong terminal. This function allows changing the terminal on a plot-by-plot basis, without changing the global terminal configuration."
  },
  {
    "objectID": "reference.html#non-exported-functions-and-types",
    "href": "reference.html#non-exported-functions-and-types",
    "title": "API Reference",
    "section": "Non-exported functions and types",
    "text": "Non-exported functions and types\nThe following may be useful when extending or developing Gaston. These functions are not part of the official API and may be modified or removed in future versions.\n\n\n\n\n\n\nGaston.terminals\n\n\n\nGaston.terminals()\nReturn a list of available gnuplot terminals\n\n\n\n\n\n\n\n\nGaston.listfigures\n\n\n\nGaston.listfigures()\nDisplay a list of all existing figures.\n\n\n\n\n\n\n\n\nGaston.gp_start\n\n\n\nGaston.gp_start()::Base.Process\nReturns a new gnuplot process.\n\n\n\n\n\n\n\n\nGaston.gp_quit\n\n\n\nGaston.gp_quit(process::Base.Process)\nEnd gnuplot process process. Returns the exit code.”\nGaston.gp_quit(f::Figure)\nEnd the gnuplot process associated with f. Returns the process exit code.\n\n\n\n\n\n\n\n\nGaston.gp_send\n\n\n\ngp_send(process::Base.Process, message::String)\nSend string message to process and handle its response.\ngp_send(f::Figure, message)\nSend string message to the gnuplot process associated with f and handle its response.\n\n\n\n\n\n\n\n\nGaston.gp_exec\n\n\n\ngp_exec(message::AbstractString)\nRun an arbitrary gnuplot command and return gnuplot’s stdout.\n\n\n\n\n\n\n\n\nGaston.Plot\n\n\n\nGaston.Plot(datafile::String, plotline::String)\nType that stores the data needed to plot a curve.\nGaston.Plot(args..., plotline = \"\")\nConstruct a new Plot. The curve data (for instance, x and y coordinates) are provided first. The curve plotline is the last argument.\n\n\n\n\n\n\n\n\nGaston.Axis\n\n\n\nAxis(settings::String           = \"\",\n     plots::Vector{Gaston.Plot} = Gaston.Plot[],\n     is3d::Bool                 = false)\nType that stores the data required to create a 2-D or 3-D axis.\nThe constructor takes the following arguments:\n\nsettings: stores the axis settings.\nplots: a vector of Plot, one per curve.\nis3d: determines if axis is generated with plot or splot.\n\n\n\n\n\n\n\n\n\nGaston.hex\n\n\n\nhex(cs::ColorScheme)\nConvert a colorsheme to a vector of numbers, where each number corresponds to each color in cs, expressed in base 10. Mean to be used with lc rgb variable."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "TODO\nGnuplot is a venerable (but actively developed), very powerful and fast program for plotting. Julia is a very powerful language for numerical computing. Gaston is a package for plotting Julia data and functions using gnuplot.\nThe following diagram illustrates how Gaston works. On the left there is a gnuplot script; the equivalent Gaston function call is on the right.\nThe data to plot is in green color. In gnuplot, the data can be provided inline as a data block (as in this example), or it can be provided in a separate file. Gaston can plot data stored in arrays (x and y in this example). Gaston also supports recipes to plot arbitrary Julia types.\nThe lines in red specify the axes settings, affecting things like the presence of a grid, the title, the legend box, tics positions/labels, etc. Finally, in blue color, the plot settings or plotline specify the properties of one specific curve within the axes (for example, the line color, thickness and style, which marker to use, etc.)\nThere is a close correspondence between gnuplot and Gaston commands; in fact, the main purpose of Gaston is to translate the Julia code on the right to the gnuplot commands on the left. Gaston has two main features:\nOther features are:"
  },
  {
    "objectID": "index.html#learning-gnuplot",
    "href": "index.html#learning-gnuplot",
    "title": "Introduction",
    "section": "Learning gnuplot",
    "text": "Learning gnuplot\nThis documentation assumes at least a basic understanding of gnuplot. Some pointers to get started with gnuplot are:\n\nThe official documentation.\nThe official list of tutorials.\nPlotting data article on gnuplotting.org.\nA blog post about Gaston by Julia Frank.\nStackoverflow has a gnuplot tag with answers to more than 6,500 questions.\n\nThe following are interesting plot galleries:\n\nOfficial gnuplot demo gallery.\nWikimedia commons gallery.\nNice collection of volumetric plots."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Introduction",
    "section": "Installation",
    "text": "Installation\nGaston v2.x requires Julia version 1.8.0 or above (Gaston v1.x supports Julia 1.6 and above), and has been tested with gnuplot versions 5 and 6. You should manually install gnuplot on your system prior to using Gaston. On Linux, it is highly recommended that you select a version with Qt support: on Debian and Ubuntu, you will need gnuplot-qt. On Arch and its derivatives, a simple pacman -S gnuplot suffices. Gnuplot also supports Windows and Mac.\nTo install Gaston from the Julia REPL, run\njulia&gt; ]add Gaston\nTyping ] switches the Julia REPL to the package manager, and the add command installs the package. To exit the package manager, hit the backspace key. Load Gaston into your Julia session with\nusing Gaston\n\n\n\n\n\n\nSpecifying the location of gnuplot\n\n\n\nThe location of the gnuplot executable can be specified with the environmental variable\n`JULIA_GNUPLOT_EXE`. If gnuplot is in the system's path, setting this variable is not\nnecessary."
  },
  {
    "objectID": "index.html#support",
    "href": "index.html#support",
    "title": "Introduction",
    "section": "Support",
    "text": "Support\nHere are some ideas on what to do if you need help with Gaston:\n\nPost a question in Julia’s discuss forum in the “plotting” category.\nChat with the author (@mbaz) on Julia’s Zulip chat forum, in the “plotting” or “helpdesk” channels.\nBug reports, suggestions and pull requests are welcome at Gaston’s github page."
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "Introduction",
    "section": "Contributing",
    "text": "Contributing\nContributions are welcome! Examples of things you can do are bug reports, improvements to the documentation, new examples and tutorials, and new features or suggestions."
  },
  {
    "objectID": "index.html#gnuplot-startup-file",
    "href": "index.html#gnuplot-startup-file",
    "title": "Introduction",
    "section": "Gnuplot startup file",
    "text": "Gnuplot startup file\nGnuplot reads and executes a startup file, if it exists, before every plot. Since an un-configured gnuplot produces plots that are less than attractive, the following minimum configuration is suggested (and was used to generate the plots in this document):\nset linetype 1 lc rgb \"blue\" pt 3\nset linetype 2 lc rgb \"red\" pt 4\nset linetype 3 lc rgb \"green\" pt 6\nset linetype 4 lc rgb \"black\" pt 12\nset linetype 5 lc rgb \"blue\" pt 5\nset linetype 6 lc rgb \"red\" pt 1\nset linetype 7 lc rgb \"green\" pt 2\nset linetype 8 lc rgb \"black\" pt 7\nset linetype cycle 8\nset style data lines\nset key noautotitle\nset auto fix\nset offsets graph .05, graph .05, graph .05, graph .05\nThe configuration file is ~/.gnuplot on Unix-like systems, and %APPDATA%\\GNUPLOT.INI on Windows."
  },
  {
    "objectID": "index.html#next-steps",
    "href": "index.html#next-steps",
    "title": "Introduction",
    "section": "Next steps",
    "text": "Next steps\n\nRead the Tutorial.\nSee plot examples in the Examples section.\nLearn how to extend Gaston to plot arbitrary Julia types in the Recipes section.\nLearn all the details about how to plot with Gaston in the Manual.\nConsult the full API Reference.\nRun the interactive Pluto notebooks, with examples and tutorials. ```"
  },
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "Tutorial",
    "section": "",
    "text": "TODO: add axes to a plot without indexing (push!) plot(f1, f2) (still not implemented)\nIf you have not installed Gaston yet, then run the following commands in the Julia REPL:\nLoad Gaston with:\nusing Gaston\nThe plots below have been rendered in a png terminal with the following configuration:\nGaston.config.term = \"pngcairo font ',10' size 640,480\"\nWe need to specify that the plot examples below will be rendered to a document and not a GUI window:\nGaston.config.output = :echo\nIn addition, gnuplot’s startup file is as described in the Introduction."
  },
  {
    "objectID": "tutorial.html#getting-started",
    "href": "tutorial.html#getting-started",
    "title": "Tutorial",
    "section": "Getting started",
    "text": "Getting started\nLet’s start with a simple sine wave plot:\n\nx = range(0, 0.5, length = 100)\ny = sin.(2*pi*10*x)\nplot(x, y)\n\n\n\n\n\n\n\n\nNow, let us add a grid and some annotations:\n\n@plot {grid, title = Q\"{/:Bold A sine wave}\", xlabel = Q\"Time\", ylabel = Q\"Volts\"} x y\n\n\n\n\n\n\n\n\nHere we have used @plot instead of plot, which allows us to specify the plot settings as a list of keyword arguments. These arguments can be stored in a “theme” using the @gpkw macro:\n\nsettings = @gpkw {grid, title = Q\"{/:Bold A sine wave}\", xlabel = Q\"Time\", ylabel = Q\"Volts\"}\n\nIn addition, we have used the Q string macro to avoid typing single quotes; Q\"Time\" is converted to \"'Time'\".\nNow let us change the line color and markers:\n\n@plot settings x y {with = \"lp\", lc = Q\"sea-green\", pt = :ecircle, pn = -16, ps = 1.5}\n\n\n\n\n\n\n\n\nParameters that affect how the curve is plotted are specified after the data. These can also be stored and reused, so that\n\nplotline = @gpkw {with = \"lp\", lc = Q\"sea-green\", pt = :ecircle, pn = -16, ps = 1.5}\n@plot settings x y plotline\n\nwould produce the exact same plot. Settings and plotline parameters can also be specified as strings; see the Manual for all the details. Gaston also has a number of built-in plot styles, showcased below.\nOne of the keyword arguments used above is a little peculiar: pt = :ecircle. Gnuplot wants point types to be specified as integers, so :ecircle (stands for “empty circle”) should not be valid. The explanation is that Gaston parses some keyword arguments to provide a more comfortable syntax. In this case, Gaston converts point types specified as symbols according to the table provided here. It is easier to remember that an empty circle is specified as :ecircle (or a full square as :fsquare) than as “6” (or “5”).\nA plot command can only generate a single curve. Use plot! or @plot! to append a curve:\n\n@plot(settings,\n      {title = Q\"Two sinusoids\", key = \"columns 1\", key = \"box outside right top\"},\n      x, y,\n      plotline, {title = \"'sin'\"})\ny2 = cos.(2*pi*10*x)\n@plot! x y2 {dashtype = Q\".-.\", lw = 2, lc = Q\"orchid\", title = Q\"cos\"}\n\n\n\n\n\n\n\n\nHere we see how multiple settings and plotline arguments can be combined. Note that any axis settings used in plot! are ignored."
  },
  {
    "objectID": "tutorial.html#plotting-functions",
    "href": "tutorial.html#plotting-functions",
    "title": "Tutorial",
    "section": "Plotting functions",
    "text": "Plotting functions\nIn the examples above, the data given to plot is stored in vectors. Functions can be plotted directly, with a given range and number of samples, as follows:\n\ng(x) = exp(-abs(x/5))*cos(x)  # function to plot\ntt = \"set title 'g = x -&gt; exp(-abs(x/5))*cos(x))'\"\nplot(tt, (-10, 10, 200), g) # plot of g from x = -10 to 10, using 200 samples\n\n\n\n\n\n\n\n\nRanges can be specified in the following alternative ways:\nplot(g)            # 101 samples, from -10 to 10\nplot((a, b), g)    # 101 samples, from a to b\nplot((a, b, c), g) # c samples, from a to b\nplot(x, g)         # g.(x)"
  },
  {
    "objectID": "tutorial.html#a-note-on-side-effects",
    "href": "tutorial.html#a-note-on-side-effects",
    "title": "Tutorial",
    "section": "A note on side effects",
    "text": "A note on side effects\nPlot commands return a value of type Gaston.Figure. When values of this type are displayed, Julia’s display system calls gnuplot behind the scenes to generate the actual plot. Plots are never generated as side effects the way they are, for example, in Matlab.\nThis means that, for example, the following code does not display any plots:\ni = 1\nwhile (i &lt; 10)\n    plot(x, i.*y)\n    i += 1\nend\nCalling the function g below does not produce any plots either:\nfunction g(x, y)\n    plot(x, y)\n    println(\"Done.\")\nend\nThe easiest way to “force” a piece of code to generate a plot is to call display explicitly:\ni = 1\nwhile (i &lt; 10)\n    plot(x, i.*y) |&gt; display\n    i += 1\nend"
  },
  {
    "objectID": "tutorial.html#variables-that-store-plots",
    "href": "tutorial.html#variables-that-store-plots",
    "title": "Tutorial",
    "section": "Variables that store plots",
    "text": "Variables that store plots\nNaturally, values of type Figure can be stored in variables and manipulated as any other Julia value:\nfunction g(x, y)\n    f = plot(x, y)\n    println(\"Done.\")\n    return f\nend\nInternally, Gaston keeps references to all Figure values it has produced. If there are one or more, one of them is active in the sense that all subsequent plot and plot! commands will target that figure. The active figure can be obtained with:\nfigure()\nand the figure f can be made active with:\nfigure(f)\nA new empty figure can be instantiated with the Figure constructor, as in f = Figure(). The new figure is automatically made the active figure."
  },
  {
    "objectID": "tutorial.html#multiplots",
    "href": "tutorial.html#multiplots",
    "title": "Tutorial",
    "section": "Multiplots",
    "text": "Multiplots\nA convenient, automatic method to create multiplot figures is provided. First, instantiate a new figure like this:\n\nf = Figure(multiplot = \"title 'Auto Layout'\");\n\nWhen a figure contains more than one axis, it is rendered using set multiplot. The multiplot keyword argument provides a flexible way to specify additional settings specific to multiplots. The figure f will be rendered by gnuplot using\nset multiplot title 'Auto Layout'\nAxes can be added by indexing into the figure:\n\nplot(f[1], x, y)           # plot x vs y in the first axis\nplot(f[2], x, sinc.(10x))  # plot sinc(10x) in the second axis\n\n\n\n\n\n\n\n\nIt is possible to have empty “slots”:\n\nplot(f[4], x, sinc.(20x), \"w lp pn 12\")  # the third axis is empty\n\n\n\n\n\n\n\n\nNote that Gaston tries to keep a square figure aspect ratio as more and more axes are included.\nAdd another curve to an axis using indexing:\n\nplot!(f[2], x, 0.3randn(length(x)))  # add noise curve to second axis\n\n\n\n\n\n\n\n\nTo get full control of the layout, pass the argument autolayout = false to Figure:\n\nf = Figure(\"title 'Arbitrary multiplot layout demo'\", autolayout = false)\nx = randn(100)\ny = randn(100)\n@plot(f[1], {margins = (0.1, 0.65, 0.1, 0.65)},\n      x, y,\n      \"w p pt '+' lc 'dark-green'\")\n@gpkw histogram(f[2],\n                {margins = (0.7, 0.95, 0.1, 0.65), tics = false},\n                y,\n                {lc = Q\"dark-green\"}, nbins = 10, horizontal = true)\n@gpkw histogram(f[3],\n                {margins = (0.1, 0.65, 0.7, 0.9), boxwidth = \"1 relative\"},\n                x,\n                {lc = Q\"dark-green\"}, nbins = 10)\n\n\n\n\n\n\n\n\nNote that the margins keyword followed by a tuple is parsed as (see here):\n\"\"\"set lmargin at screen 0.7\n   set rmargin at screen 0.95\n   set bmargin at screen 0.1\n   set tmargin at screen 0.65\n\"\"\""
  },
  {
    "objectID": "tutorial.html#closing-figures",
    "href": "tutorial.html#closing-figures",
    "title": "Tutorial",
    "section": "Closing figures",
    "text": "Closing figures\nWe can close all figures created so far with\n\ncloseall()\n\nThis command closes all gnuplot processes started by Gaston and closes all figures. Close figure f with\nclose(f)"
  },
  {
    "objectID": "tutorial.html#d-plots",
    "href": "tutorial.html#d-plots",
    "title": "Tutorial",
    "section": "3-D Plots",
    "text": "3-D Plots\nPlotting in 3-D is similar to 2-D, except that splot (and @splot, splot!, @splot!) are used instead of plot. This example shows how to plot the surface defined by function s:\n\nx = y = -15:0.2:15\ns = (x,y) -&gt; @. sin(sqrt(x*x+y*y))/sqrt(x*x+y*y)\n@splot \"set title 'Sombrero'\" \"set hidden3d\" {palette = :cool} x y s \"w pm3d\"\n\n\n\n\n\n\n\n\nThe palette cool is defined in ColorSchemes. Together with the palette keywork, any color scheme from that package can be used simply by prepending its name with :."
  },
  {
    "objectID": "tutorial.html#plotting-in-text-terminals",
    "href": "tutorial.html#plotting-in-text-terminals",
    "title": "Tutorial",
    "section": "Plotting in text terminals",
    "text": "Plotting in text terminals\nIt is often convenient to generate plots directly in the terminal. Gnuplot supports a few different ways to do this:\n\nsixelgd uses sixels to generate plots almost identical to those produced by regular GUI terms: \nblock uses Unicode characters to draw a plot in the terminal: \n\nNote that, in all cases, Gaston must be configured for terminal output with\nGaston.config.output = :echo\nThere are other text terms, such as dumb, but in general those produce output of worse quality than sixelgd and block."
  },
  {
    "objectID": "tutorial.html#plotting-with-strings-and-dates",
    "href": "tutorial.html#plotting-with-strings-and-dates",
    "title": "Tutorial",
    "section": "Plotting with strings and dates",
    "text": "Plotting with strings and dates\nBesides numerical arrays and ranges, Gaston can also plot arrays of strings, as shown in the following example:\n\nx = 10*rand(10)\ny = 10*rand(10)\nw = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\nplot(x, y, w, \"w labels\")\n\n\n\n\n\n\n\n\nJulia’s Date type can be plotted by converting it to strings, and using gnuplot’s date support. The following example is inspired in (this)[https://lazarusa.github.io/gnuplot-examples/examples/2d/lines/dates].\n\nusing Dates\n\ndates = Date(2018, 1, 1):Day(1):Date(2019, 12, 31)\nta = 0.5*rand(length(dates))\ntimefmt = \"%Y-%m-%d\"\npfmt = \"%Y-%m-%d\"\ntempo = string.(dates) # convert dates to strings\nxmin1 = \"2018-02-01\"\nxmax1 = \"2019-04-01\"\n\n@gpkw settings = {xdata = \"time\",\n                  timefmt = \"'$(timefmt)'\",\n                  grid,\n                  format = \"x '$(pfmt)'\",\n                  xtics = \"rotate by -35\",\n                  xrange = \"['$(xmin1)':'$(xmax1)']\",\n                  yrange = (-0.25, 0.75)}\nplot(settings, tempo, ta, \"u 1:2 w l t 'Activity per day'\")"
  },
  {
    "objectID": "tutorial.html#plotting-using-latex",
    "href": "tutorial.html#plotting-using-latex",
    "title": "Tutorial",
    "section": "Plotting using Latex",
    "text": "Plotting using Latex\nGnuplot provides a few different ways to interface with Latex. This example shows how to do it using the cairolatex terminal. The process is as follows: first, generate a plot and save it using term = cairolatex. This generates two files: the plot without any text, tics, or markings, in pdf format, and a .tex file that can be included in a Latex document. This file will add text to the pdf image using Latex, resulting in a plot that integrates well with the rest of the document.\nFirst, generate the plot. Note that the Latex string equation is added as a label to the plot, causing Latex to render it.\nequation = raw\"\"\"\\begin{minipage}[c]{\\textwidth}\\begin{equation*}\"\"\" *\n           raw\"\"\"\\sin(x) = \\sum_0^{+\\infty} \\frac{(-1)^n}{(2n + 1)!} x^{2n+1}\"\"\" * \n           raw\"\"\"\\end{equation*} \\end{minipage}\"\"\"\ns = @gpkw { title = Q\"Polynomial approximation of sin(x)\",\n            style = \"fill transparent solid 0.6 noborder\",\n            xtics = (positions = [-pi, -pi/2, 0, pi/2, pi],\n                     labels = [raw\"$-\\pi$\", raw\"$-\\pi/2$\", \"0\", raw\"$\\pi/2$\", raw\"$\\pi$\"]),\n            xrange = (-3.8, 3.8),\n            yrange = (-1.5, 1.5),\n            key = \"box opaque left horiz\",\n            linetype = :YlOrBr_7,\n            grid = \"front\",\n            label = \"at graph 0.62,0.2 front center '$equation'\" }\nx = range(-2pi, 2pi, 1000)\ny = sin.(x)\n@plot s x y x \"w filledcurve t 'n=0' lt 1\"\n@plot! x y x .- x.^3/6 \"w filledcurve t 'n=1' lt 2\"\n@plot! x y x .- x.^3/6 .+ x.^5/120 \"w filledcurve t 'n=2' lt 3\"\n@plot! x y x .- x.^3/6 .+ x.^5/120 .- x.^7/5040 \"w filledcurve t 'n=3' lt 4\"\n@plot! x y \"w l t 'sin(x)' lw 2 lc rgb 'black'\"\nsave(term=\"cairolatex pdf input color dashed size 5in,3.3in\", filename = \"test.tex\")\nThis code creates two files, test.tex and test.pdf, which can be used to generate a final pdf plot by compiling the following script with pdflatex:\n\\documentclass{article}\n\\usepackage{amsmath}\n\\usepackage{graphicx}\n\\usepackage{color}\n\n\\begin{document}\n\\begin{figure}\n    \\input{test.tex}\n\\end{figure}\n\\end{document}\nThe finished plot looks like this:\n\nOther gnuplot terminals, such as tikz, epslatex, etc, can be used with similar workflows. This example is inspired in this code."
  },
  {
    "objectID": "tutorial.html#gnuplot-datasets-and-tables",
    "href": "tutorial.html#gnuplot-datasets-and-tables",
    "title": "Tutorial",
    "section": "Gnuplot datasets and tables",
    "text": "Gnuplot datasets and tables\nSome kinds of plots require a way to specify exactly what points to plot in a specific format (instead of relying on Gaston to format the data the right way). This can be accomplished with Gaston.Datatable, which wraps IOBuffer. The contents of Datatable are provided to gnuplot without any further processing.\nOne example is drawing contour lines on a heatmap (taken from this gnuplot blog post). The function Gaston.plotwithtable returns a Gaston.DataTable, which can be used as an argument to plot.\n\n# define function to plot\nx = y = range(-5, 5, 100)\nf4(x,y) = sin(1.3x) * cos(0.9y) + cos(0.8x) * sin(1.9y) + cos(0.2x*y)\n\n# obtain function contours using 'plot with table'\nsettings = \"\"\"set contour base\n              set cntrparam level incremental -3, 0.5, 3\n              unset surface\"\"\"\ncontours = Gaston.plotwithtable(settings, x, y, f4)\n\n# calculate meshgrid for heatmap plot\nz = Gaston.meshgrid(x, y, f4)\n\n# plot heatmap and contours\nplot(\"\"\"unset key\n        unset colorbox\n        set palette rgbformulae 33,13,10\"\"\",\n        x, y, z, \"with image\")\nplot!(contours, \"w l lw 1.5 lc 'slategray'\")\n\n\n\n\n\n\n\n\nAnother example is drawing polygons or polytopes, where the data provided to gnuplot are the coordinates of the vertices of each face, and faces are separated by newlines. The following example (adapted from the demos in gnuplot’s official site) draws an icosahedron using the plotline with polygon.\n\n# The icosahedron has twelve vertices, given by these coordinates\nphi = (1 + sqrt(5)) / 2\nico = ( ( 0,    1,    phi), #1\n        ( 0,    1,   -phi), #2\n        ( 0,   -1,    phi), #3\n        ( 0,   -1,   -phi), #4\n        ( 1,    phi,  0),   #5\n        ( 1,   -phi,  0),   #6\n        (-1,    phi,  0),   #7\n        (-1,   -phi,  0),   #8\n        ( phi,  0,    1),   #9\n        (-phi,  0,    1),   #10\n        ( phi,  0,   -1),   #11\n        (-phi,  0,   -1)    #12\n)\n# plot settings\ns = \"\"\"unset border\n       unset key\n       set view equal xyz\n       unset xtics\n       unset ytics\n       unset ztics\n       set pm3d depthorder\n       set pm3d interpolate 1,1 flush begin noftriangles border linecolor rgb \"black\" linewidth 2 dashtype solid corners2color mean\n       set title \"An icosahedron drawn as 20 individual faces\"\n       set style fill transparent solid 0.8\n       set view 69, 33\n    \"\"\"\n# write the vertices that make up each face in a Datatable\nfaces = Gaston.DataTable(stack([ico[i] for i in (1, 5, 7)], dims=1),\n    stack([ico[i] for i in (1, 7, 10)], dims=1),\n    stack([ico[i] for i in (1, 10, 3)], dims=1),\n    stack([ico[i] for i in (1, 3, 9)], dims=1),\n    stack([ico[i] for i in (1, 9, 5)], dims=1),\n    stack([ico[i] for i in (2, 5, 11)], dims=1),\n    stack([ico[i] for i in (2, 11, 4)], dims=1),\n    stack([ico[i] for i in (2, 4, 12)], dims=1),\n    stack([ico[i] for i in (2, 12, 7)], dims=1),\n    stack([ico[i] for i in (2, 7, 5)], dims=1),\n    stack([ico[i] for i in (8, 3, 10)], dims=1),\n    stack([ico[i] for i in (8, 10, 12)], dims=1),\n    stack([ico[i] for i in (8, 12, 4)], dims=1),\n    stack([ico[i] for i in (8, 4, 6)], dims=1),\n    stack([ico[i] for i in (8, 6, 3)], dims=1),\n    stack([ico[i] for i in (7, 12, 10)], dims=1),\n    stack([ico[i] for i in (6, 4, 11)], dims=1),\n    stack([ico[i] for i in (5, 9, 11)], dims=1),\n    stack([ico[i] for i in (9, 6, 11)], dims=1),\n    stack([ico[i] for i in (9, 3, 6)], dims=1))\n# plotline\nwp = \"with polygons fc rgb 'gray'\"\n# splot is used since the icosahedron is 3-D\nsplot(s, faces, wp)\n\n\n\n\n\n\n\n\nGaston provides a few Datatable constructors, described in the Manual."
  },
  {
    "objectID": "tutorial.html#animations",
    "href": "tutorial.html#animations",
    "title": "Tutorial",
    "section": "Animations",
    "text": "Animations\nAnimations require using a terminal that support them; the gif or webp terminals are the most popular ones (make sure your notebook supports the image/webp MIME type before using it).\nCreating an animation is similar to multiplotting: multiple axes are drawn on the same figure. When the gnuplot terminal contains the animate option, however, the plot is rendered as an animation.\nNote that gnuplot will output a message to STDERR indicating how many frames were recorded; this message is purely informative and not actually an error.\nThe following examples illustrate how to create and display animations, in this case with a background image:\nframes = 75 # number of animation frames\n# new, empty figure\nf = Figure()\n# create a background curve that is shown in all frames\nx_bckgnd = range(-1, 1, 200)  # x values for the background image\ny_bckgnd = sin.(2π*2*x_bckgnd)\nbckgnd = Gaston.Plot(x_bckgnd, y_bckgnd, \"lc 'black'\")  # background curve\n# generate all frames\nx = range(-1, 1, frames)\nfor i in 1:frames\n    # first plot the function...\n    plot(f[i], x[i], sin(2π*2*x[i]), \"w p lc 'orange' pt 7 ps 7\")\n    # ... then add the background\n    push!(f(i), bckgnd)\nend\nfor i in frames:-1:1  # in reverse\n    plot(f[2frames-i+1], x[i], sin(2π*2*x[i]), \"w p lc 'orange' pt 7 ps 7\")\n    push!(f(2frames-i+1), bckgnd)\nend\nsave(f, filename = \"2DAnim.webp\", term = \"webp animate loop 0 size 640,480\")\n\nFirst, an empty figure f is created with Figure(). Then, Gaston.Plot is used to create an object, bckgnd, which contains a curve (a black sine wave) and which can be inserted into an axis. Every loop iteration, a new axis is inserted into f with plot(f[i], ...) with a curve consisting of an orange circle somewhere along the sine wave. Then, the background curve is inserted into the same axis with push!(f(i), bckgnd). Finally, the plot is saved in a format that supports animation (webp in this case).\nA difficulty arises when mixing plot formats in a notbook (say, png and webp): the terminal is specified in the configuration variable Gaston.config.term. However, some notebook programs (such as Pluto) execute cells in arbitrary order. This means that changing the terminal in one cell may affect other cells.\nTo solve this problem, Gaston provides a way to ignore the global terminal configuration when rendering a plot. A figure f can be rendered with a given terminal by calling animate(f, term). The default value of term is stored in Gaston.config.altterm and defaults to gif animate loop 0. Examples are provided in these interactive Pluto notebooks."
  },
  {
    "objectID": "tutorial.html#themes",
    "href": "tutorial.html#themes",
    "title": "Tutorial",
    "section": "Themes",
    "text": "Themes\nGaston supports themes, which are pre-configured plot styles. There are two kinds of themes: settings themes, which specify gnuplot set commands, and plotline themes, which specify how a particular curve is displayed (color, thickness, etc.) Settings themes are stored in the dictionary Gaston.sthemes, and plotline themes are stored in Gaston.pthemes. The themes in these dictionaries can be modified, and new themes can be stored in them. Built-in themes used to create common plot styles (such as scatter and stem) are described in the next section.\nGaston also includes a few settings themes that conveniently define common configurations:\n\n\n\ntheme\npurpose\n\n\n\n\n:notics\nRemove all tics from the plot.\n\n\n:labels\nLabel axes using x, y, and z (for splot)\n\n\n:unitranges\nSet x, y, and z ranges to [-1:1]\n\n\n:nocb\nDisable the colorbox\n\n\n\nThis example shows how to use these themes:\n\nplot(:notics, :labels, \"set grid\", sin)"
  },
  {
    "objectID": "tutorial.html#included-plot-styles",
    "href": "tutorial.html#included-plot-styles",
    "title": "Tutorial",
    "section": "Included plot styles",
    "text": "Included plot styles\nGaston includes several themes for common plot styles. The easiest way to use them is through the specialized plot commands described below. For more details, see the manual.\nThe themed commands described below use combinations of these themes to create a specific type of plot.\nNote that, in gnuplot, plotlines (as in with lines linecolor 'green') are especially difficult to theme, because repeated options (and options given in the wrong order) are errors. As an example of this difficulty, consider using scatter to plot some points; we want to use pointtype number 4:\nscatter(rand(10), rand(10), \"pointtype = 4\")\nThis command causes an error because the plotline theme :scatter already specifies the point type! To plot a scatter plot using the desired point type, use plain plot with the appropriate settings, create your own theme, or modify the built-in theme. Here is an example where the theme is modified. First find out how the theme is set up:\n\nGaston.pthemes[:scatter]\n\n3-element Vector{Pair}:\n      \"with\" =&gt; \"points\"\n \"pointtype\" =&gt; :fcircle\n \"pointsize\" =&gt; 1.5\n\n\nThen, modify the entry for the pointtype:\n\nGaston.pthemes[:scatter][2] = \"pointtype\" =&gt; 4\nscatter(\"set title 'Scatter plot with modified theme\", rand(10), rand(10), \"lc 'dark-green'\")\n\n\n\n\n\n\n\n\nNote how the line color was specified without causing an error, since it is not included in the theme.\nThe following subsections cover all included plot styles, along with the list of built-in themes they rely on, as well as some examples.\n\nScatter plots\n\n\n\ncommand\nsettings theme\nplotline theme\n\n\n\n\nscatter\nnone\n:scatter\n\n\nscatter3\n:scatter3\n:scatter\n\n\n\n\nxg = randn(20)\nyg = randn(20)\nscatter(\"set title 'Scatter plot'\n         set key outside\",\n        xg, yg,\n        \"title 'gaussian'\")\nxu = rand(20)\nyu = rand(20)\nscatter!(xu, yu, \"title 'uniform'\")\n\n\n\n\n\n\n\n\nA 3-D scatter plot (the default settings theme (:scatter3) draws all the borders):\n\nscatter3(\"set title 'A 3-D scatter plot\", randn(10), randn(10), randn(10))\n\n\n\n\n\n\n\n\n\n\nStem plots\n\n\n\ncommand\nsettings theme\nplotline theme\n\n\n\n\nstem\nnone\n:stem, :impulses\n\n\n\nStem plots are often used in digital signal processing applications to represent a discrete-time (sampled) signal.\n\nstem(\"set title 'Stem plot'\", g)\n\n\n\n\n\n\n\n\nTo generate a stem plot, gnuplot actually plots twice: once with style impulses and once with points (set to empty circles). Normally, each of these plots would have a different color. To use the same color for both, use the color keyword argument:\n\nstem(\"set title 'Stem plot'\", g, color = \"'goldenrod'\")\n\n\n\n\n\n\n\n\nThe circular marks can be omitted with the onlyimpulses keyword argument:\n\nstem(\"set title 'Stem plot with onlyimpulses'\", g, onlyimpulses = true)\n\n\n\n\n\n\n\n\n\n\nBar plots\n\n\n\ncommand\nsettings theme\nplotline theme\n\n\n\n\nbar\n:boxplot\n:box\n\n\nbarerror\n:boxerror\n:box\n\n\n\n\nbar(\"set title 'Bar plot'\", rand(10), \"lc 'turquoise'\")\n\n\n\n\n\n\n\n\nThis example shows how to plot two sets of bars, using bar!:\n\nbar(\"set title 'Two bar plots'\", rand(10), \"lc 'dark-violet'\")\nbar!(1.5:10.5, 0.5*rand(10), \"lc 'plum' fill pattern 4\")\n\n\n\n\n\n\n\n\nError bars are handled by barerror; there is also barerror!.\n\nbarerror(\"set title 'Error bars plot'\", 1:10, rand(10), 0.1*rand(10).+0.1, \"lc 'sandybrown'\")\n\n\n\n\n\n\n\n\n\n\nHistograms\n\n\n\ncommand\nsettings theme\nplotline theme\n\n\n\n\nhistogram\n:histplot\n:box, :horhist (1-D); :image (2-D)\n\n\n\nThe histogram function takes these optional keyword arguments:\n\nnbins: specifies the number of bins. Defaults to 10.\nmode::Symbol: Controls histogram normalization mode; passed to StatsBase.normalize. Defaults to :none.\nedges: a vector or a range specifying the bin edges; if specified, takes precedence over nbins. Defaults to nothing.\nhorizontal::Bool: if true, the histogram is drawn horizontally. Defaults to false.\n\nhistogram uses the settings theme :histplot, and plotline themes :box or :horhist. 2-D histograms are supported, by passing two datasets.\nUsing nbins:\n\nhistogram(\"set title 'Histogram (nbins)'\",\n          randn(10_000),\n          nbins = 20, mode = :pdf)\n\n\n\n\n\n\n\n\nUsing edges:\n\nhistogram(\"set title 'Histogram (edges)'\",\n          0.75*randn(10_000),\n          edges = -2:0.75:3, \"lc 'dark-khaki'\")\n\n\n\n\n\n\n\n\nA horizontal histogram:\n\nhistogram(\"set title 'horizontal histogram'\",\n          rand(1000),\n          nbins = 15, horizontal = true, \"lc 'orchid'\")\n\n\n\n\n\n\n\n\nIn the case of 2-D histograms, nbins or egdes may be a tuple; otherwise, both axes use the same settings. The plotline theme is :image.\n\nx = 2.5*randn(100_000)\ny = 2.5*randn(100_000)\nth = @gpkw {palette = :matter, colorbox = false, title = Q\"2-D histogram\",\n            xrange = (-10, 10), yrange = (-10, 10)}\nhistogram(th, x, y, nbins = 50, mode = :pdf)\n\n\n\n\n\n\n\n\n\n\nImages\n\n\n\ncommand\nsettings theme\nplotline theme\n\n\n\n\nimagesc\n:imagesc\n:image, :rgbimage\n\n\n\nArrays may be plotted as images using imagesc. Note that, in contrast to other plotting packages, the first data row is plotted horizontally and at the top.\n\nX = [0 1 2 3;\n     0 3 2 1;\n     0 2 2 0;\n     3 0 0 0]\nimagesc(\"unset xtics\", \"unset ytics\", X)\n\n\n\n\n\n\n\n\nTo display the image as grayscale, use the gray palette.\n\nusing Images, TestImages\nimg = testimage(\"lake_gray\");\nii = channelview(img)[1,:,:].*255;\n@gpkw imagesc({palette = :gray}, ii)\n\n\n\n\n\n\n\n\nAn RGB image is a plot of a 3-D array, where [1,;,:] is the red channel, [2,:,:] is the green channel, and [3,:,:] is the blue channels.\n\nimg = testimage(\"lake_color\")\n@gpkw imagesc({size = \"square\", autoscale = \"fix\"}, channelview(img).*255)\n\n\n\n\n\n\n\n\n\n\nSurfaces\n\n\n\ncommand\nsettings theme\nplotline theme\n\n\n\n\nwireframe\n:hidden3d\nnone\n\n\nsurf\n:hidden3d\n:pm3d\n\n\n\nA surface can be plotted as a “wireframe” (or a “mesh”) with the wireframe command. By default, hidden3d is active, so that elements behind the surface are not plotted.\n\nf1(x,y) = sin(sqrt(x*x+y*y))/sqrt(x*x+y*y)\nth = @gpkw {title = Q\"Sombrero Wireframe\", palette = :matter}\nwireframe(th, (-15, 15, 30), f1)\n\n\n\n\n\n\n\n\nSolid surfaces are plotted with surf:\n\nth = @gpkw {title = Q\"Sombrero Surface\", palette = :matter}\nsurf(th, (-15, 15, 200), f1)\n\n\n\n\n\n\n\n\nWhen plotting a function and a single range (such as (-15, 15, 200) above) is given, it is used for both x and y coordinates. Two ranges may be given as well to control the x and y ranges separately:\n\nsurf(th, (-15, 15, 200), (-25, 5, 200), f1)\n\n\n\n\n\n\n\n\n\n\nContour plots\n\n\n\ncommand\nsettings theme\nplotline theme\n\n\n\n\ncontour\n:contour\n:labels\n\n\nsurfcountour\n:contourproj\n:labels\n\n\n\nBy default, contour plots include numerical labels:\n\nf2(x,y) = cos(x/2)*sin(y/2)\ncontour(\"set title 'Contour Plot'\", (-10, 10, 50), f2)\n\n\n\n\n\n\n\n\nTo plot contours without labels, use the keyword argument labels = false:\n\ncontour(\"set title 'Contour Plot Without Labels'\", (-10, 10, 50), f2, labels = false)\n\n\n\n\n\n\n\n\nIt’s possible to plot a wireframe surface and a contour projected on the base of the plot using surfcountour:\n\nsurfcontour(\"set title 'Surface With Projected Contours'\", (-5, 5, 40), f2, \"lc 'orange'\")\n\n\n\n\n\n\n\n\nThe same plot without contour labels:\n\nsurfcontour(\"set title 'Surface With Contours, No Labels'\",\n            (-5, 5, 40), f2, \"lc 'orange'\", labels = false)\n\n\n\n\n\n\n\n\n\n\nHeatmap plots\n\n\n\ncommand\nsettings theme\nplotline theme\n\n\n\n\nheatmap\n:heatmap\n:pm3d\n\n\n\n\ntheme = @gpkw {palette = :matter, title = Q\"Heatmap\"}\nheatmap(theme, :notics, :nocb, :labels, (-10, 10, 70), f2)"
  },
  {
    "objectID": "recipes.html",
    "href": "recipes.html",
    "title": "Recipes",
    "section": "",
    "text": "Load Gaston with:\nusing Gaston\nThe plots below have been rendered in a png terminal with the following configuration:\nGaston.config.term = \"pngcairo font ',10' size 640,480\";\nWe need to specify that the plot examples below will be rendered to a document and not a GUI window:\nGaston.config.output = :echo;"
  },
  {
    "objectID": "recipes.html#defining-new-plot-types-and-recipes",
    "href": "recipes.html#defining-new-plot-types-and-recipes",
    "title": "Recipes",
    "section": "Defining new plot types and recipes",
    "text": "Defining new plot types and recipes\nThe following examples illustrate how to extend Gaston to create new types of plots and to seamlessly plot arbitrary data types.\n\nFunctions that return a Gaston.Figure\nThis example shows how to create a new type of plot: plotting complex data as two subplots, with the magnitude and phase of the data. The example also defines new themes.\n\n#define new type\nstruct ComplexData{T &lt;: Complex}\n    samples :: Vector{T}\nend\n\n# define new themes\nGaston.sthemes[:myplot1] = @gpkw {grid, ylabel = Q\"Magnitude\"}\nGaston.sthemes[:myplot2] = @gpkw {grid, ylabel = Q\"Angle\"}\nGaston.pthemes[:myplot1] = @gpkw {w = \"lp\"}\nGaston.pthemes[:myplot2] = @gpkw {w = \"p\", lc = \"'black'\"}\n\n# define new function\nfunction myplot(data::ComplexData; kwargs...)::Figure\n                # convert data to a format gnuplot understands\n                x = 1:length(data.samples)\n                y1 = abs2.(data.samples)\n                y2 = angle.(data.samples)\n                # create a new figure with fixed layout (two rows, one col)\n                f = Figure(multiplot = \"layout 2,1\", autolayout = false)\n                # add two plots to f\n                plot(f[1], x, y1, stheme = :myplot1, ptheme = :myplot1)\n                plot(f[2], x, y2, stheme = :myplot2, ptheme = :myplot2)\n                return f\nend\n\n# plot example: complex damped sinusoid\nt = range(0, 1, 20)\ny = ComplexData(exp.(-t) .* cis.(2*pi*7.3*t))\nmyplot(y)  # plot\n\n\n\n\n\n\n\n\nThe use of themes allows the user to modify the default properties of the plot, by modifying the themes (such as Gaston.sthemes[:myplot1]) instead of having to re-define myplot. Of course, similar functionality can be achieved with the use of keyword arguments.\n\n\nRecipes: Adding new methods to Gaston.convert_args\nThe following example shows how to extend Gaston.convert_args to plot a custom type Data1. This simple example returns a Gaston.Plot object (essentially a curve), which contains data and a plotline.\nusing Gaston: Plot\nimport Gaston: convert_args\n\n# define custom type\nstruct Data1\n    samples\nend\n\n# add method to convert_args\nfunction convert_args(d::Data1, args... ; pl = \"\", kwargs...)\n    x = 1:length(data.samples)\n    y = data.samples\n    Plot(x, y, pl)\nend\n\n# create some data\ndata = Data1(rand(20))\n\n# plot\nplot(\"set title 'Simple data conversion recipe'\", data, \"w lp pt 7 lc 'olive'\")\nNote that this kind of recipe will also seamlessly work with plot!, which adds the curve to the current axis.\nA recipe may also return an entire Axis object, with its own settings and curves. The following example returns an axis with two curves.\nusing Gaston: Plot, Axis\n\nstruct Data2 end\n\nfunction convert_args(x::Data2, args... ; kwargs...)\n    x = range(0, 1, 100)\n    p1 = Plot(x, cos.(4x), \"dt '-' lc 'red' t 'cosine'\")\n    p2 = Plot(x, sin.(5x), \"dt '.' lc 'blue' t 'sine'\")\n    Axis(\"set grid\\nset title 'Full axis recipe'\", [p1, p2])\nend\n\nplot(Data2())\nNote that the axis returned by a recipe can be inserted directly into a multiplot:\nf = Figure(multiplot = \"title 'Recipe example'\")\nplot(f[1], randn(100), \"w p\")\nplot(f[2], Data2())\nFinally, a recipe can also generate a full multiplot, with multiple axes, as illustrated in the example below:\nusing Gaston\nimport Gaston: convert_args, Plot, Axis, Axis3\ncloseall() #| hide_line\n\nstruct MyType end\n\nfunction convert_args(x::MyType)\n    t1 = range(0, 1, 40)\n    t2 = range(-5, 5, 50)\n    z = Gaston.meshgrid(t2, t2, (x,y) -&gt; cos(x)*cos(y))\n    @gpkw a1 = Axis({title = Q\"First Axis\"}, [Plot(1:10, rand(10))])\n    @gpkw a2 = Axis({title = Q\"Trig\"}, [Plot(t1, sin.(5t1), {lc = Q\"black\"}),\n                                        Plot(t1, cos.(5t1), {w = \"p\", pt = 16})])\n    @gpkw a3 = Axis3({title = Q\"Surface\", tics = false, palette = (:matter, :reverse)},\n                     [Plot(t2, t2, z, {w = \"pm3d\"})])\n    @gpkw a4 = Axis({tics, title = false, title = Q\"Last Axis\"},\n                    [Plot(1:10, 1:10, rand(10,10), \"w image\")])\n    # return named tuple with four axes\n    (axes = [a1, a2, a3, a4],\n     multiplot = \"title 'A Four-Axes Recipe' layout 2,2\",\n     autolayout = false)\nend\n\nplot(MyType())"
  },
  {
    "objectID": "manual.html",
    "href": "manual.html",
    "title": "Manual",
    "section": "",
    "text": "TODO: keyword arguments, Datatable, list of included convenience themes\nThis manual covers all aspects of using Gaston."
  },
  {
    "objectID": "manual.html#gaston-settings",
    "href": "manual.html#gaston-settings",
    "title": "Manual",
    "section": "Gaston Settings",
    "text": "Gaston Settings\n\nThe terminal\nBy default, gnuplot chooses an appropriate terminal: qt or wxt on Linux, windows on Windows, and aqua on MacOS. The terminal can be set by changing the value of Gaston.config.term; for example:\nGaston.config.term = \"pngcairo font ',10' size 700,400\";\nTo show the terminals supported by gnuplot, run:\nGaston.terminals()\n\n\nOther settings\n\nGaston.config.output: controls how plots are displayed. Possible values are:\n\n:external: plots are displayed in GUI windows. This is the default value.\n:echo: sends text-based plots (like png and sixelgd) back to the terminal. Useful for notebooks and IDEs, and for plotting on the terminal.\n:null: execute all plot commands but do not actually produce a plot.\n\nIf Gaston detects it is running in a notebook environment, it automatically sets the terminal to pngcairo and config.output to :echo. When the automatic detection does not work, these setting will have to be set manually.\nGaston.config.embedhtml: Bool, defaults to false. Enables embedding plots in HTML; useful to enable interactivity in Pluto and Jupyter notebooks. See examples in the provided Pluto notebooks."
  },
  {
    "objectID": "manual.html#plotting",
    "href": "manual.html#plotting",
    "title": "Manual",
    "section": "Plotting",
    "text": "Plotting\nThe plot function is used to plot one curve, while plot! is used to add a curve to the same plot. 3-D plots are created with splot and splot!. plot returns a value of type Figure, which contains a vector of Axis (each containing one or more Plots, or curves.\nA plot command takes three different kinds of arguments: settings, data, and plotline, in that order.\nplot([settings...], data..., [plotline...])\nFurther curves may be added using plot!. (For 3-D plots, use splot and splot! instead.)\nMore specifically, a plot command takes:\n\nZero or more settings arguments, which get converted to gnuplot set commands.\nOne or more data arguments, which are written to a file in the format gnuplot expects.\nZero or more plotline arguments, which are appended to gnuplot’s plot or splot commands.\n\nGaston provides several alternative ways to specify these.\n\nSettings and Plotlines\nAll the following are equivalent.\n\nOne single string\n\nplot(\"set grid\n      unset key\n      set title 'A Sinusoid'\",\n     x, y,\n     \"with linespoints lc 'green'\")\n\nMultiple strings\n\nplot(\"set grid\", \"unset key \\n set title 'A Sinusoid'\",\n     x, y,\n     \"with linespoints\", \"lc 'green'\")\n\nKeywords with @plot\n\n@plot({grid = true, key = false, title = \"'A Sinusoid'\"},\n      x, y,\n      {with = \"linespoints\", lc = \"'green'\"})\nKeyword options are enclosed in curly brackets {}. To set an option without arguments, such as set grid, use either a lone grid, or grid = true. To unset an option, such as in unset grid, use grid = false. Options can be repeated; each one will be converted to a separate set line.\n@plot also accepts strings, and in fact strings and keywords may be combined:\n@plot({grid, key = false}, \"set title 'A Sinusoid'\",\n      x, y,\n      \"with linespoints\", {lc = \"'green'\"})\nIt is possible to omit the parenthesis, but in this case the command must fit in a single line.\n@plot {grid, key = false, title = \"'A Sinusoid'\"} x y {with = \"lp\", lc = \"'green'\"}\nFor 3-D plots, use the macro @splot.\n\nQuoted strings\nAll strings passed to gnuplot must be enclosed in single quotes, such as in lc = \"'green'\" in the example above. The @Q_str string macro can help reduce the number of quotes needed:\n@plot {grid = true, key = false, title = Q\"A Sinusoid\"} x y {with = \"lp\", lc = Q\"green\"}\nThis macro turns \"abc\" into \"'abc'\".\n\n\nKeyword parsing\nSome @plot (or @gpkw) keyword arguments are parsed by Gaston, providing syntax that may be more convenient than gnuplot’s. The following list is for keywords that specify axis settings:\n\nFor any keyword argument, {arg} or {arg = true} is parsed to set arg, while {arg = false} is parsed to unset arg.\nFor xtics, ytics, ztics or tics:\n\n{tics = R} where R is an AbstractRange is parsed as set tics $(first(R)), $(step(R)), $(last(R)).\n{tics = T} where T is a Tuple is parsed as set tics $T.\n{tics = NT} where NT is a NamedTuple is parsed as in this example: {tics = (labels = (\"one\", \"two\"), positions = (0, 2))} is equivalent to set tics ('one' 0, 'two' 2, )\n\nFor xrange, yrange, zrange, cbrange:\n\n{xrange = R} where R is a vector or tuple is parsed as set xrange [$R[1]:$R[2]]\nIf R contains an Inf, then it is replaced with *.\n\nIf the keyword is ranges, then all four ranges listed above are set.\nFor palette, if the value is a symbol, then the corresponding color scheme from ColorSchemes.jl is converted to gnuplot’s format. If a tuple of two symbols is provided and the second one is :reverse, then the order of the palette is reversed.\nFor {view = V}, if V is a Tuple, then it is parsed as set view $V[1], $V[2].\nFor {linetype = S} where S is a Symbol, then the corresponding color scheme is converted to a set of line types, one per color in the scheme.\nFor {margins = T} where T is a Tuple is parsed as in this example: {margins = (1, 2, 3, 4)} is equivalent to set lmargin at screen 1, set rmargin at screen 2, set bmargin at screen 3, set tmargin at screen 4.\n\nThe following list is for keywords that specify plotline elements:\n\nplotstyle is equivalent to with.\nmarkersize and ms are equivalent to pointsize.\nlegend is equivalent to title.\nmarker is equivalent pointtype.\n\nIn addition, marker, pointtype and pt accept symbolic names for the marker types, according to the following table:\n\n\n\nname\ngnuplot pointtype\n\n\n\n\n:dot\n0\n\n\n:⋅\n0\n\n\n:+\n1\n\n\n:plus\n1\n\n\n:x\n2\n\n\n:*\n3\n\n\n:star\n3\n\n\n:esquare\n4\n\n\n:fsquare\n5\n\n\n:ecircle\n6\n\n\n:fcircle\n7\n\n\n:etrianup\n8\n\n\n:ftrianup\n9\n\n\n:etriandn\n10\n\n\n:ftriandn\n11\n\n\n:edmd\n12\n\n\n:fdmd\n13\n\n\n\n\n\n\nData\nData to be plotted can be provided as vectors and/or matrices. Gaston converts the data to a format compatible with gnuplot. Three cases are supported: * All data arguments are vectors. * The first two arguments are vectors of length n and m, and the third argument is a matrix of size n x m; further arguments are optional. * All provided arguments are matrices of size n x m.\nRecipes can be provided to convert arbitrary types to data that gnuplot understands.\n\nFunctions\nFunctions can be plotted directly, with a given range and number of samples, which can be specified in the following alternative ways:\n# g is a function\nplot(g)            # plots `g` evaluated at 100 samples, from -10 to 9.99\nplot((a, b), g)    # plots `g` evaluated at 100 samples, from a to b\nplot((a, b, c), g) # plots `g` evaluated at c samples, from a to b\nplot(x, g)         # plots g.(x)\n\n\nPlot with table\nIn some cases, it is useful to have gnuplot produce plot data in a “table” format, which can then be plotted. See an example in contour lines on heatmap. The (non-exported) function Gaston.plotwithtable returns a Gaston.DataTable storing the table. All plot commands accept this type.\n(add constructors here)\n\n\n\nSimple themes\nFrequently-used settings or plotlines may be stored in a “theme”; the @gpkw macro processes keyword arguments wrapped in curly brackets.\ntheme = @gpkw {grid, key = false}\nplot(theme, x, y)\nThemes may be combined with other themes and/or with strings:\ntheme2 = @gpkw {xlabel = Q\"X\"}\nplot(theme, \"set title 'A Sinusoid'\", theme2, x, y)\nThemes can also be used for plotlines, and these may also be combined with other themes and/or strings.\npltheme = @gpkw {w = \"lp\", pt = \"'o'\", ps = 3}\nplot(theme, \"set title 'A Sinusoid'\", theme2, x, y, pltheme)\nGaston includes a few generic themes:\n\n\n\nAxis themes\nDescription\n\n\n\n\n:notics\nRemoves all tics\n\n\n:labels\nGeneric axis labels (x, y, z)\n\n\n:nocb\nRemoves colorbox\n\n\n:unitranges\nSet all ranges to [-1:1]\n\n\n\nFor example, the following command plots a sine wave with no tics and generic x and y axis labels:\nplot(:notics, :labels, \"set title 'Example'\", (-1, 1), sin)\nThemes are also used to provide common plot types (illustrated in Themes). The following are the provided specialized plot commands and the themes they use:\n\n\n\n\n\n\n\n\nCommands\nSettings theme\nPlotline theme\n\n\n\n\nscatter, scatter!\n:scatter, :scatter3\n:scatter\n\n\nstem, stem!\nNone\n:stem, :impulses (optional)\n\n\nbar, bar!\n:boxplot\n:box\n\n\nbarerror, barerror!\n:boxerror\n:box\n\n\nhistogram\n:histplot\n:box, :horhist (1-D); :image (2-D)\n\n\nimagesc\n:imagesc\n:image, :rgbimage\n\n\nsurf, surf!\n:hidden3d\n:pm3d\n\n\ncontour\n:contour\n:labels (optional)\n\n\nsurfcontour\n:contourproj\n:labels (optional)\n\n\nwireframe, wireframe!\n:hidden3d\nNone\n\n\nwiresurf, wiresurf!\n:wiresurf\nNone\n\n\nheatmap\n:heatmap\n:pm3d\n\n\n\n\n\n\n\n\n\nPlotline themes\n\n\n\nPlotline themes must be handled with care: gnuplot requires plotline options\nto be specified in a certain order, may not be repeated, and some combinations are invalid.\nIt is very easy to create erroneous plotlines.\n\n\n\n\n\n\n\n\nGaston is not a gnuplot parser\n\n\n\nGaston does not validate that the settings and plotline given to gnuplot are valid. When gnuplot returns an error or warning, it is echoed to the terminal."
  },
  {
    "objectID": "manual.html#multiplot",
    "href": "manual.html#multiplot",
    "title": "Manual",
    "section": "Multiplot",
    "text": "Multiplot\nAs mentioned above, a Figure contains a vector of Axis. Any figure with more than one axis is plotted using gnuplot’s multiplot feature (except in the case where the terminal configuration contains animate).\nThere are several ways to insert axes into a figure. The first is to index into the figure:\nf = Figure()\nplot(f[2], sin)\nplot(f[4], cos)\nNote that:\n\nIndexing into a non-existing axis creates an empty axis at that index.\nIt’s possible to have empty axes (f[1] and f[3] above are empty).\nBy default, Gaston will manage the figure’s layout, trying to keep a square aspect ratio. In the example above, the figure will have dimensions 2x2.\n\nThe second method is to push! a figure into another:\nf1 = plot(sin)\nf2 = plot(cos)\npush!(f1, f2)\nHere, the axis at f[2] will be inserted into the axes vector of f1. It is possible to index into a figure to obtain a specific axis:\nf1 = plot(sin)\nplot(f1[2], cos)  # f1 contains two axes\nf2 = Figure()\nplot(tan)         # plot goes into f2 since it is the active figure\npush!(f2, f1(2))  # the axis with a plot of cos is inserted into f2\nThe third and final method is to plot multiple figures together:\nplot(f1, f2, multiplot = \"...\", autolayout = ...)\nThis will return a new figure with all axes from f1 and f2.\nThe Figure constructor takes a couple of options to control how multiplot behaves:\n\nmultiplot: a string that is appended to set multiplot, such as \"title 'A multiplot'\". Defaults to \"\".\nautolayout: a boolean that controls whether Gaston should manage the figure’s layout. Defaults to true."
  },
  {
    "objectID": "manual.html#managing-multiple-figures",
    "href": "manual.html#managing-multiple-figures",
    "title": "Manual",
    "section": "Managing multiple figures",
    "text": "Managing multiple figures\nGaston has the ability to create and manage multiple GUI plot windows simultaneously. Each window is backed up by its own gnuplot process. The following commands can be used to create and control multiple windows.\n\nCreating and selecting figures\nFigure()\nCreates a new, empty figure. All figures are of type Gaston.Figure. Gaston keeps internal references to all figures, to prevent them from being garbage collected.\nWhen creating a figure intended for multiplot, a multiplot argument can be provided:\nFigure(multiplot = \"title 'A Multiplot'\")\nWhen a figure is created, it becomes the active figure, meaning that subsequent plot commands will go to this figure by default. It is possible to keep figures in different variables:\nfig1 = Figure()\nfig2 = Figure()\nand then redirect plot commands to the desired figure:\nplot(fig1, ...)  # plot goes to fig1\nplot!(fig2, ...) # new plot added to fig2\nBy default, plot resets the contents of a figure.\nUsually it is more convenient to keep figures in variables, but it is also possible to manage figures using handles:\nFigure(\"density\") # figure with handle \"density\"\nFigure(:volume)   # figure with handle :volume\nFigure(33)        # figure with handle 33\nHandles can be of any type. All figures have a handle. By default, handles are integers in increasing order starting from 1.\nThe keyword argument handle allows specifying the destination of a plot command:\nplot(..., handle = :volume)\nplot!(..., handle = 33)\nscatter(..., handle = \"density\")\nTo activate a figure given its handle, use:\nfigure(handle)\nIt is possible to make an existing figure f the active figure with:\nfigure(f)\nWith no arguments, figure() returns the current figure.\nTo obtain the list of all current figures and their handles, and to identify the active figure, use the unexported function Gaston.listfigures().\n\n\nClosing figures\nTo close the active figure, run\nclosefigure()\nThe figure with handle h can be closed with closefigure(h). Likewise, to close figure f use closefigure(f). Closing a figure quits the underlying gnuplot process.\nTo close all figures, use closeall()."
  },
  {
    "objectID": "manual.html#saving-plots",
    "href": "manual.html#saving-plots",
    "title": "Manual",
    "section": "Saving plots",
    "text": "Saving plots\nA plot can be saved to a file in any format supported by gnuplot, with the function\nsave(f ; output, term)\nwhere the arguments are:\n\nf, which can be either a Figure, or an arbitrary value that is taken to be the handle of the figure to save. Defaults to the active figure.\noutput, a string that specifies the filename. If empty, it defaults to figure- followed by the figure’s handle; the filename extension is set to the first three characters of the gnuplot terminal (see next argument).\nterm, specifies the gnuplot terminal used to save the plot; defaults to \"pngcairo font ',7'\"."
  },
  {
    "objectID": "manual.html#defining-new-plot-types-and-recipes",
    "href": "manual.html#defining-new-plot-types-and-recipes",
    "title": "Manual",
    "section": "Defining new plot types and recipes",
    "text": "Defining new plot types and recipes\nThere are several ways to extend Gaston to create new plot types or to plot arbitrary types. One is to define a new function that returns a Gaston.Figure. The rest involve extending Gaston.convert_args in various ways.\n\nFunctions that return a Gaston.Figure\nThe first way to extend Gaston to handle arbitrary types is to define a new function (and optionally new themes) that returns a Gaston.Figure.\nThe recommended way to proceed is to:\n\nDefine new themes if necessary, by adding key-value pairs to Gaston.sthemes and/or Gaston.pthemes.\nProcess the function arguments as required.\nCreate a new figure inside the function, using either Figure or MultiFigure.\nUse plot to add new axes and curves to the figure, possibly using the new themes.\nReturn the figure.\n\n\n\nAdding new methods to Gaston.convert_args\nThe function Gaston.convert_args is used to convert arbitrary types to something that gnuplot understands: basically, iterables of numbers, strings or dates. This function is called with all data and all keyword arguments given to the plot command.\nFor 3-D plot commands such as splot, the function convert_args3 should be used instead. Note that these functions are not exported.\nBoth plot and plot!call convert_args behind the scenes, while both splot and splot! call convert_args3.\nThere are three kinds of recipes:\n\nRecipes that return a single curve (x, y, and a plotline).\nRecipes that return a whole axis (settings and curve(s)).\nRecipes that generate a multiplot (mulitplot settings and an array of axes).\n\n\nRecipes that return a single curve\nThis kind of recipe returns a Plot object, which includes data along with a plotline specification. The following example illustrates the process:\nimport Gaston: convert_args, Plot\n\n# add method to convert_args\nfunction convert_args(d::Data1, args... ; pl = \"\", kwargs...)\n    x = 1:length(data.samples)\n    y = data.samples\n    Plot(x, y, pl)  # return a Plot\nend\n\nplot(data)   # plot\nplot!(data)  # also works\n\n\nRecipes that return a new axis\nA recipe may also return an entire Axis object, with its own settings and curves. The following example illustrates returning an axis with two curves.\nimport Gaston: convert_args, Plot, Axis\n\nstruct Data2 end\n\nfunction convert_args(x::Data2, args... ; kwargs...)\n    x = range(0, 1, 100)\n    p1 = Plot(x, cos.(4x), \"dt '-' lc 'red' t 'cosine'\")\n    p2 = Plot(x, sin.(5x), \"dt '.' lc 'blue' t 'sine'\")\n    Axis(\"set grid\\nset title 'Full axis recipe'\", [p1, p2])  ## return an Axis\nend\n\nplot(Data2())\n\n\nRecipes to generate multiplots\nFinally, a recipe can also generate a full multiplot, with multiple axes. In this case, the recipe must return a NamedTuple with the following fields: * axes, a vector of Axis. * mp_settings, a string with gnuplot’s multiplot settings. * is_mp, a boolean, true if the length of axes is larger than 1. * mp_auto, a boolean to turn on automatic layout.\nHere’s an example, creating a figure with four axes and automatic layout.\nimport Gaston: Plot, Axis, Axis3, convert_args\n\nstruct MyType end\n\nfunction convert_args(x::MyType)\n    t1 = range(0, 1, 40)\n    t2 = range(-5, 5, 50)\n    z = Gaston.meshgrid(t2, t2, (x,y) -&gt; cos(x)*cos(y))\n    @gpkw a1 = Axis({title = Q\"First Axis\"}, [Plot(1:10, rand(10))])\n    @gpkw a2 = Axis({title = Q\"Trig\"}, [Plot(t1, sin.(5t1), {lc = Q\"black\"}),\n                                        Plot(t1, cos.(5t1), {w = \"p\", pt = 16})])\n    @gpkw a3 = Axis3({title = Q\"Surface\", tics = false, palette = (:matter, :reverse)},\n                     [Plot(t2, t2, z, {w = \"pm3d\"})])\n    @gpkw a4 = Axis({tics, title = false, title = Q\"Last Axis\"},\n                    [Plot(1:10, 1:10, rand(10,10), \"w image\")])\n    # return named tuple with four axes\n    (axes = [a1, a2, a3, a4],\n     mp_settings = \"title 'A Four-Axes Recipe' layout 2,2\",\n     is_mp = true,\n     mp_auto = false)\nend\n\nplot(MyType())"
  }
]