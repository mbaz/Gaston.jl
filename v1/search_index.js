var documenterSearchIndex = {"docs":
[{"location":"3dplots/#threedeetut-1","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"","category":"section"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"Three dimensional plots can be created with the commands surf and surf!. These are very similar to plot, except for the z coordinate, which is a matrix that specifies the z-coordinate of the points specified in x and y.","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"In addition, the following commands are specialized for different types of 3-D plots:","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"Command Purpose\nscatter3, scatter3! 3-D point clouds\ncontour Contour plots\nheatmap Heatmap plots","category":"page"},{"location":"3dplots/#How-to-plot-a-set-of-3-D-coordinates-1","page":"3-D plotting tutorial","title":"How to plot a set of 3-D coordinates","text":"","category":"section"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"A set of 3-D coordinates may be explicitly given. Plotting them is just a matter of providing the data to gnuplot. Note that the data may be plotted as a wireframe (with plot style lines, which is the default), or as a surface (pm3d) with an optional palette.","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"using Gaston # hide\nset(reset=true) # hide\nset(termopts=\"size 550,325 font 'Consolas,11'\") # hide\n# plot a wireframe\nx = [0,1,2,3]\ny = [0,1,2]\nz = [10 10 10 10 ; 10 5 1 0 ; 10 10 10 10]\nsurf(x, y, z,\n     Axes(title = \"'3D: Valley of the Gnu from gnuplot manual'\"))","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"Note that the matrix of z coordinates is defined so that the columns are indexed by the x coordinates. In other words, z[1,1] is the surface at x = 0, y = 0 and z[3,1] is the coordinate at x = 0, y = 2.","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"surf(x, y, z, w = :pm3d,\n     Axes(title = \"'Surface with palette'\",\n          palette = :summer))","category":"page"},{"location":"3dplots/#How-to-plot-a-3-D-function-1","page":"3-D plotting tutorial","title":"How to plot a 3-D function","text":"","category":"section"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"A 3-D function defines a surface for a given set of x and y samples. Consider the function (x,y) -> @. sin(sqrt(x*x+y*y))/sqrt(x*x+y*y). It may be plotted with","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"x = y = -15:0.4:15\nf1 = (x,y) -> @. sin(sqrt(x*x+y*y))/sqrt(x*x+y*y)\nsurf(x, y, f1, lc = :turquoise,\n     Axes(title    = :Sombrero_Wireframe,\n          hidden3d = :on))","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"surf(x, y, f1, w = :pm3d,\n     Axes(title    = :Sombrero_Surface,\n          palette  = :cool,\n          cbrange  = (-0.2, 1),\n          hidden3d = :on))","category":"page"},{"location":"3dplots/#Plotting-multiple-surfaces-with-surf!-1","page":"3-D plotting tutorial","title":"Plotting multiple surfaces with surf!","text":"","category":"section"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"The equivalent to plot! is surf!:","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"surf(x,y,f1,w=:pm3d,Axes(title=:Sombrero_Surface,palette=:cool,cbrange=(-0.2,1),hidden3d=:on)) # hide\nsurf!(x, y , (x,y) -> cos.(x./2).*sin.(y./2)-3, lc = :orange, w = :l)","category":"page"},{"location":"3dplots/#Plotting-contours-1","page":"3-D plotting tutorial","title":"Plotting contours","text":"","category":"section"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"Gnuplot's contour support is quite flexible. The contour command sets up pretty generic contours, which hopefully are useful in many cases. For much more detail, see gnuplot's documentation.","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"The contours of a surface can be plotted using:","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"x = y = -5:0.1:5\ncontour(x, y, (x,y) -> 5cos.(x/2).*sin.(y/2))","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"The labels can be disabled if labels=false is passed as an argument:","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"contour(x, y, (x,y) -> 5cos.(x/2).*sin.(y/2), labels=false)","category":"page"},{"location":"3dplots/#Plotting-heatmaps-1","page":"3-D plotting tutorial","title":"Plotting heatmaps","text":"","category":"section"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"Heatmaps can be plotted using heatmap. Just like contour, this command sets up a pretty basic heatmap; for more control, see gnuplot's documentation.","category":"page"},{"location":"3dplots/#","page":"3-D plotting tutorial","title":"3-D plotting tutorial","text":"heatmap(x, y, (x,y)->cos.(x/2).*sin.(y/2))","category":"page"},{"location":"2d-gallery/#twodeegal-1","page":"2-D Plots","title":"2-D Gallery","text":"","category":"section"},{"location":"2d-gallery/#","page":"2-D Plots","title":"2-D Plots","text":"(Many of these examples taken from, or inspired by, @lazarusa's amazing gallery)","category":"page"},{"location":"2d-gallery/#Glowing-curves-1","page":"2-D Plots","title":"Glowing curves","text":"","category":"section"},{"location":"2d-gallery/#","page":"2-D Plots","title":"2-D Plots","text":"using Gaston # hide\nset(reset=true) # hide\nset(termopts=\"size 550,325 font 'Consolas,11'\") # hide\nx = 0:0.3:4\na = exp.(- x)\nb =  exp.(- x.^2)\nplot(x, a, curveconf = \"w lp lw 1 lc '#08F7FE' pt 7 t 'e^{-x}'\",\n     Axes(object=\"rectangle from screen 0,0 to screen 1,1 behind fc 'black' fs solid noborder\",\n          border=\"lw 1 lc 'white'\",\n          xtics=\"textcolor rgb 'white'\",\n          ytics=\"textcolor rgb 'white'\",\n          ylabel=\"'y' textcolor 'white'\",\n          xlabel=\"'x' textcolor 'white'\",\n          grid=\"ls 1 lc '#2A3459' dt 4\",\n          key=\"t r textcolor 'white'\",\n          style=\"fill transparent solid 0.08 noborder\"))\nplot!(x, b, curveconf = \"w lp lw 1 lc '#FFE64D' pt 7 t 'e^{-x^2}'\")\nfor i in 1:10\n       plot!(x,a,w=\"l lw $(1 + 1.05*i) lc '#F508F7FE' t ''\")\n       plot!(x,b,w=\"l lw $(1 + 1.05*i) lc '#F5FFE64D' t ''\")\nend\nplot!(x, a, curveconf = \"w filledcu y=0 lw 1 lc '#08F7FE' t ''\")\nplot!(x, a, supp= b , curveconf = \"w filledcu lw 1 lc '#FFE64D' t ''\")","category":"page"},{"location":"2d-gallery/#Volcano-data-1","page":"2-D Plots","title":"Volcano data","text":"","category":"section"},{"location":"2d-gallery/#","page":"2-D Plots","title":"2-D Plots","text":"using RDatasets\nvolcano = Matrix{Float64}(dataset(\"datasets\", \"volcano\"))\nimagesc(volcano,\n        Axes(palette = :inferno,\n        auto=\"fix\",\n        size=\"ratio -1\",\n        title = \"'Aukland s Maunga Whau Volcano'\"))","category":"page"},{"location":"2d-gallery/#Animation-1","page":"2-D Plots","title":"Animation","text":"","category":"section"},{"location":"2d-gallery/#","page":"2-D Plots","title":"2-D Plots","text":"An animation can be produced by pushing new plots into an existing plot, and then saving the result as a GIF the the animate option.","category":"page"},{"location":"2d-gallery/#","page":"2-D Plots","title":"2-D Plots","text":"closeall()  #hide\nt = 0:0.01:2π\nf(t,i) = sin.(t .+ i/10)\nac = Axes(title = :Animation, xlabel = :x, ylabel = :y);  # axes configuration\ncc = \"w l lc 'black' notitle\"  # curve configuration\nF = plot(t, f(t,1), curveconf = cc, ac);  # create the first frame, with handle 1\nfor i = 2:50\n    pi = plot(t, f(t,i), curveconf = cc, ac, handle=2) # frames, with handle 2\n    push!(F, pi)  # push the frame to F\nend\nsave(term = \"gif\", saveopts = \"animate size 600,400 delay 1\",\n     output=\"anim.gif\", handle=1)","category":"page"},{"location":"2d-gallery/#","page":"2-D Plots","title":"2-D Plots","text":"(Image: )","category":"page"},{"location":"2d-gallery/#Color-from-palette-1","page":"2-D Plots","title":"Color from palette","text":"","category":"section"},{"location":"2d-gallery/#","page":"2-D Plots","title":"2-D Plots","text":"x = -2π:0.05:2π\nplot(x, sin.(3x), supp = x, curveconf = \"w l notitle lw 3 lc palette\",\n     Axes(palette = :ice))","category":"page"},{"location":"2d-gallery/#Categorical-data-1","page":"2-D Plots","title":"Categorical data","text":"","category":"section"},{"location":"2d-gallery/#","page":"2-D Plots","title":"2-D Plots","text":"using RDatasets\ndset = dataset(\"datasets\", \"iris\")\nbyCat = dset.Species\ncateg = unique(byCat)\nac = Axes(linetype = :tab10,\n          xlabel = \"'Sepal length'\",\n          ylabel = \"'Sepal width'\",\n          auto = \"fix\",\n          title = \"'Iris dataset'\",\n          key = \"b r font ',9' tit 'Species' box\")\nc = categ[1]\nindc = findall(x -> x == c, byCat)\np = plot(dset.SepalLength[indc], dset.SepalWidth[indc],\n         ac, curveconf = \"w p tit '$(c)' pt 7 ps 1.4 \")\nc = categ[1]\nindc = findall(x -> x == c, byCat)\nP = plot(dset.SepalLength[indc], dset.SepalWidth[indc],\n         ac, curveconf = \"w p tit '$(c)' pt 7 ps 1.4 \");\nc = categ[2]\nindc = findall(x -> x == c, byCat)\nplot!(dset.SepalLength[indc], dset.SepalWidth[indc],\n      curveconf = \"w p tit '$(c)' pt 7 ps 1.4 \");\nc = categ[3]\nindc = findall(x -> x == c, byCat)\nplot!(dset.SepalLength[indc], dset.SepalWidth[indc],\n      curveconf = \"w p tit '$(c)' pt 7 ps 1.4 \");\nP","category":"page"},{"location":"2dplots/#twodeetut-1","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"This section provides a brief tutorial on 2-D plotting, with examples on how to obtain common plot types. For full details, we refer the reader to gnuplot's documentation.","category":"page"},{"location":"2dplots/#Basics-of-plotting-1","page":"2-D plotting tutorial","title":"Basics of plotting","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"A call to plot looks like this:","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"plot(x, y, z, supp, curvekwargs..., Axes(axeskwargs...))","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"x, y, z and supp are the data to plot. Only y is mandatory for 2-D plots. For most plots, vectors are plotted, but plotting images requires a matrix or 3-D array. supp is a keyword argument used for supplementary data, which are additional columns that gnuplot can use, such as the errorbar length, or the marker size. Gaston translates the provided data to the format that gnuplot requires, and writes it to a temporary file.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"curvekwargs is a set of keyword arguments that are related to the appearance of the plotted data. These typically specify the plot style, the line color, the marker type, etcetera. These arguments are used to build a plot command for gnuplot. Note that, instead of using a bunch of individual keyword arguments, you can pass gnuplot a complete plot command using the keyword curveconf.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"axeskwargs is a set of keyword arguments wrapped in Axes(), which specify the look of the axes, or figure; this refers to things like the plot title, tics, ranges, grid, etcetera. Essentially, anything that can be set in gnuplot, can be configured from Gaston by wrapping it in Axes(). The special keyword axesconf is used to provide a string with commands that are passed literally to gnuplot.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"To add a new curve to an existing figure, use plot!. It accepts the same arguments as plot, except for Axes() arguments, which can only be set from plot.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The plot command has enough flexibility to plot everything that Gaston is capable of. However, Gaston provides a few specialized commands that make certain plots easier. These are illustrated below.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Command Purpose\nscatter, scatter! Plot point clouds\nstem Plot discrete (sampled) signals\nbar Plot bar charts\nhistogram Plot histograms\nimagesc Plot images","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"(Some of the examples below are taken from lazarusa's excellent gallery).","category":"page"},{"location":"2dplots/#Debug-mode-1","page":"2-D plotting tutorial","title":"Debug mode","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"If you want to see exactly what commands Gaston is sending to gnuplot, you can turn on debug mode:","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"set(debug = true)","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Use set(debug = false) to turn this mode off.","category":"page"},{"location":"2dplots/#Set-the-plot-style,-line-color,-line-pattern,-line-width,-and-markers-1","page":"2-D plotting tutorial","title":"Set the plot style, line color, line pattern, line width, and markers","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The plot style is set with the keys w, with, or plotstyle. Gnuplot supports many different plot styles; for example, lines means plotting a line, points is just the markers, and linespoints is a line with markers. See all the details in gnuplot's documentation.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The line color is set with lc or linecolor; while the line width is specified with linewidth or lw. The marker type is configured with pointtype, pt or marker. Usually gnuplot identifies each marker type by a number, but Gaston provides some equivalent names (see Introduction to plotting. The marker size is configured with pointsize, ps or ms. The number of markers may be configured with pointnumber or pn.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The line style can be configured in multiple ways; one is to specify linestyle or ls followed by a pattern of dashes and points such as '-.-'.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The plotted curve can be given a legend with title or legend.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The following examples use all these options.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"using Gaston # hide\nset(reset=true) # hide\nset(termopts=\"size 550,325 font 'Consolas,11'\") # hide\n# plot with lines and markers\nt = -5:0.05:5\nplot(t, sin,\n            # linespoints plot style\n            w  = :lp,\n            # line color\n            lc = :turquoise,\n            # line width\n            lw = 3,\n            # empty circles\n            marker = \"ecircle\",\n            # marker size\n            ms = 1.5,\n            # plot only ten markers\n            pn = 10,\n            # legend\n            legend = :A_sine_wave\n           )","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"# plot with dashed line\nplot(t, sin,\n            # lines plot style\n            w  = :l,\n            # line width\n            lw = 3,\n            # dashed line\n            ls = \"'-.-'\"\n           )","category":"page"},{"location":"2dplots/#Set-the-plot-title,-axis-labels,-tics,-legends-and-grid-1","page":"2-D plotting tutorial","title":"Set the plot title, axis labels, tics, legends and grid","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Since these are attributes of the entire figure, they must be wrapped by Axes(). The title is set with title, the axis labels with xlabel and ylabel.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The tics are configured with xtics and ytics. The grid can be turned on with grid. The position and shape of the legend box is configured with key.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The following example shows how to use these attributes.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"plot(t, sin,\n            w  = :lp, lc = :turquoise, lw = 3,\n            marker = \"ecircle\", ms = 1.5,\n            pn = 10, legend = :A_sine_wave,\n            Axes(# set the title\n                 title = \"'Example plot'\",\n                 # turn on the grid\n                 grid = :on,\n                 # specify tics\n                 xtics = -5:2:5,\n                 ytics = ([-1 0 1], [\"- one\", \"zero\", \"+ one\"]),\n                 # configure legend box\n                 key = \"outside center bottom\"\n                 ))","category":"page"},{"location":"2dplots/#Logarithmic-plots-1","page":"2-D plotting tutorial","title":"Logarithmic plots","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The axes can be configured to have a logarithmic scale, using axis = semilogy, semilogx, or loglog.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"using SpecialFunctions\nQ(x) = 0.5erfc(x/sqrt(2))\nSNR = 1:15\nplot(10log10.(SNR), Q.(sqrt.(SNR)),\n     Axes(axis = \"semilogy\",\n          xlabel = \"'Signal to Noise Ratio (dB)'\",\n          ylabel = \"'Bit Error Rate'\",\n          ytics  = \"out format '10^{%T}'\",\n          grid   = \"xtics mytics\",\n          title  = \"'BPSK Bit Error Rate'\"))","category":"page"},{"location":"2dplots/#Step-plots-1","page":"2-D plotting tutorial","title":"Step plots","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"In step plots, data points are joined with a horizontal line. To obtain a step plot, set the plot style to steps, fsteps, or fillsteps.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"t = -2:0.06:2\nplot(t, sin.(2π*t),\n     plotstyle = :steps,\n     Axes(title = \"'Steps plot'\"))","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"plot(t, sin.(2π*t),\n     w = :fillsteps,\n     Axes(style = \"fill solid 0.5\",\n          title = \"'Fillsteps plot'\"))","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The color can be specified with fillcolor:","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"plot(t, sin.(2π*t),\n     w = :fillsteps,\n     fc = :plum,\n     Axes(style = \"fill solid 0.5\",\n          title = \"'Fillsteps plot'\"))","category":"page"},{"location":"2dplots/#Plotting-with-financial-and-error-bars-1","page":"2-D plotting tutorial","title":"Plotting with financial and error bars","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Gaston supports plotting using financial and error bars, by setting the plot style appropriately. Supplementary data is passed to gnuplot using the argument supp.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"x = 1:0.5:8\nopen = 3*(0.5 .- rand(length(x)))\nclose = open .+ 1;\nlow = open .- 1;\nhigh = open .+ 1.5;\nfin = [low high close]\nplot(x, open, supp = fin, plotstyle = \"financebars\",\n     Axes(title = \"'Example of financial bars'\"))","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"x = 0:2:50\ny = @. 2.5x/(5.67+x)^2\nerr = 0.05*rand(length(x))\nplot(x, y, supp = err, plotstyle = :errorlines,\n     Axes(title = \"'Example of error lines'\"))","category":"page"},{"location":"2dplots/#Plotting-filled-curves-1","page":"2-D plotting tutorial","title":"Plotting filled curves","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"To \"fill\" the area below a curve, use the plot style \"filledcurves\". In the example below, we use curveconf to pass a full plot command to gnuplot. The style is set to transparent, so one plot will not obscure those behind it.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"x = LinRange(-10,10,200)\nfg(x,μ,σ) = exp.(.-(x.-μ).^2 ./(2σ^2))./(σ*√(2π))\nplot(x, fg(x, 0.25, 1.5),\n     curveconf = \"w filledcu lc '#E69F00' dt 1 t '0.25,1.5'\",\n     Axes(style = \"fill transparent solid 0.3 noborder\",\n          key = \"title 'μ,σ' box 3\",\n          xlabel = \"'x'\", ylabel=\"'P(x)'\",\n          title = \"'Example of filled curves'\"))\nplot!(x, fg(x, 2, 1), curveconf = \"w filledcu lc '#56B4E9' dt 1 t '2,1'\")\nplot!(x, fg(x, -1, 2), curveconf =\"w filledcu lc '#009E73' dt 1 t '-1,2'\")","category":"page"},{"location":"2dplots/#Filling-the-space-between-two-curves-1","page":"2-D plotting tutorial","title":"Filling the space between two curves","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"It is possible to fill the space between two curves by providing the second curve as a supplementary column. In this example, gnuplot will fill the space between sin.(x) and sin.(x) .+ 1.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"x = LinRange(-10,10,200)\nplot(x, sin.(x) .- 0.2, supp = sin.(x) .+ 0.2,\n     curveconf = \"w filledcu lc '#56B4E9' fs transparent solid 0.3\",\n     Axes(title = :Filling_the_space_between_two_curves))\nplot!(x, sin.(x), lc = :blue)","category":"page"},{"location":"2dplots/#Box-plots-1","page":"2-D plotting tutorial","title":"Box plots","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"This example shows the use of supplementary data with the \"boxerrorbars\" style. the vector yerr controls the length of the error bar for each box, while lcval assigns each box a color (since lc palette is given in curveconf). Finally, a color palette is specified using a symbol (:summer), which refers to a color scheme from ColorSchemes.jl.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"using Random\nx = 1:2:20\ny = 5*rand(10)\nyerr = 0.4*abs.(randn(10))\nlcval = 1:10\nplot(x, y, supp=[yerr lcval],\n     curveconf = \"w boxerrorbars notit lc palette fs solid 0.5\",\n     Axes(palette = :summer,\n          xrange=(0,22),\n          yrange=(0,6)))","category":"page"},{"location":"2dplots/#Scatter-plots-(point-clouds)-1","page":"2-D plotting tutorial","title":"Scatter plots (point clouds)","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"A scatter plot can be generated with the scatter command:","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"c = 2rand(1000).-1 .+ im*(2rand(1000).-1)\np = filter(x->abs(x)<1, c)\nscatter(p,\n        marker = \"fsquare\",\n        pointsize = 0.25,\n        Axes(object = \"ellipse at 0,0 size 2,2\",\n             title = \"'Random points within the unit circle'\"))","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Note that, when the data to plot is complex, the real part is interpreted as the x coordinate and the imaginary part as the y coordinate.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Besides the standard markers, any UTF-8 character may be used:","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"scatter(randn(30), randn(30), marker = \"λ\")","category":"page"},{"location":"2dplots/#Bubble-plots-1","page":"2-D plotting tutorial","title":"Bubble plots","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"This example shows how to generate a scatter plot where the color and size of each point is specified with supplementary data. This example also shows how to turn off the colorbox.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"n = 40\nx, y, z = randn(n), randn(n), randn(n)\nplot(x, y, supp = [5z z],\n     curveconf = \"w p notit pt 7 ps var lc palette\",\n     Axes(palette = :ice,\n          xrange = (-2.2, 2.5),\n          yrange = (-2.2, 2.2),\n          colorbox = :off))","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"info: `scatter` with gnuplot\nBehind the scenes, scatter calls plot with the points plotstyle.","category":"page"},{"location":"2dplots/#Stem-plots-1","page":"2-D plotting tutorial","title":"Stem plots","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Stem plots make it obvious one is plotting a discrete-time signal. The stem command replicates the behavior of stem in Matlab, Octave, et al:","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"t = -2:0.06:2\nstem(t, sin.(2π*t))","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"By default, the line color is blue and the lines are made sligthly thicker. If only the vertical lines (\"impulses\") are desired, pass the option onlyimpulses=true to stem:","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"stem(t, sin.(2π*t), onlyimpulses = true)","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"info: `stem` with gnuplot\nBehind the scenes, stem calls plot with the impulses plotstyle, followed (if onlyimpulses == true) by a call to plot! with the points plotstyle and the pointtype set to \"ecircle\".","category":"page"},{"location":"2dplots/#Bar-plots-1","page":"2-D plotting tutorial","title":"Bar plots","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Bar plots can be generated with the bar command:","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"year = range(1985, length=20);\ndata = 0.5 .- rand(20)\nbar(year, data,\n    fc = \"'dark-goldenrod'\",\n    legend = \"'Random number'\",\n    Axes(xtics = \"rotate\",\n        key = \"box under\",\n        boxwidth = 0.66,\n        style = \"fill pattern 2\")\n   )","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"info: `bar` with gnuplot\n","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Behind the scenes, bar uses gnuplot's boxes plotstyle, with a default box width of 0.8 and solid fill.","category":"page"},{"location":"2dplots/#Histograms-1","page":"2-D plotting tutorial","title":"Histograms","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"To plot histograms, use the histogram command. This command takes the same properties as bar. In addition, histogram accepts a bins parameter, used to specify the number of bins, and a norm parameter that can be used to normalize the area under the histogram.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"histogram(rand(10000),\n          bins = 15,\n          norm = 1,\n          Axes(title = :Histogram,\n               yrange = \"[0:1.8]\"))","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"It is of course possible to use histogram (or any other plot command) along with plot! to produce different kinds of plots in the same figure:","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"x = -5:0.05:5\ndata = randn(10000)\ngaussian = @. exp(-x^2/2)/sqrt(2π)\nhistogram(data,\n          bins = 25,\n          norm = 1,\n          legend = \"'Experimental'\",\n          linecolor = :turquoise,\n          Axes(boxwidth = \"0.8 relative\",\n               title = \"'Experimental and Theoretical Gaussian distributions'\",\n               key = \"box top left\"))\nplot!(x, gaussian,\n      linecolor = :black,\n      legend = \"'Theoretical'\")","category":"page"},{"location":"2dplots/#Images-1","page":"2-D plotting tutorial","title":"Images","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"The command to plot an image is imagesc. It can plot a scaled or RGB image, depending on whether the provided coordinates are an array with two or with three dimensions.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Note that imagesc interprets the x axis as the columns of the matrix. In other words, element [1,1] is located in the top-left corner of the plot, and element [end:1] is in the bottom-left corner.","category":"page"},{"location":"2dplots/#Scaled-image-1","page":"2-D plotting tutorial","title":"Scaled image","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"A scaled image is a plot of a matrix whose elements are interpreted as grayscale values (which may be displayed in color with a given palette).","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"Z = [5 4 3 1 0 ;\n     2 2 0 0 1 ;\n     0 0 0 1 0 ;\n     0 1 2 4 3]\nimagesc(Z, Axes(title = \"'Simple scaled image'\", palette = :summer))","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"To display the image as grayscale, use the gray palette.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"using Images\nusing TestImages\nimg = testimage(\"lake_gray\");\nii = channelview(img)[1,:,:].*255;\nimagesc(ii, Axes(palette = :gray))","category":"page"},{"location":"2dplots/#RGB-image-1","page":"2-D plotting tutorial","title":"RGB image","text":"","category":"section"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"An RGB image is a plot of a 3-D array whose elements are interpreted as the red, green, and blue components of each image pixel. The array's [1,;,:] elements are a matrix representing the red channel, while [2,:,:] and [3,:,:] are the green and blue channels respectively.","category":"page"},{"location":"2dplots/#","page":"2-D plotting tutorial","title":"2-D plotting tutorial","text":"img = testimage(\"lake_color\")\nimagesc(channelview(img).*255,\n        Axes(size = \"square\", autoscale = \"fix\"))","category":"page"},{"location":"extending/#Extending-Gaston-1","page":"Extending Gaston","title":"Extending Gaston","text":"","category":"section"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"Gaston offers multiple plotting commands that cover most cases of general data plotting. However, it is sometimes convenient to extend its capabilities to cover more specific use cases. One simple case is the generation of consistent plots of a certain type. A more complex example is plotting of new types, not just numerical data. We illustrate these two cases with examples.","category":"page"},{"location":"extending/#Consistent-plots-in-a-specific-application-1","page":"Extending Gaston","title":"Consistent plots in a specific application","text":"","category":"section"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"Consider this situation: we are designing and simulating a new communications algorithms and we need to plot the resulting bit error rate (BER). BER plots have certain characteristics:","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"The x label defaults to E_b/N_0 (dB).\nThe y label defaults to Bit Error Rate, but could also be Symbol Error Rate.\nThe y axis is logarithmic, and we want the tics to be negative powers of ten.\nThe grid should be visible.\nThe plot title defaults to BER as a function of SNR.\nWe wish to have markers at each SNR value, defaulting to full diamonds.\nWe like to use a thick line (width 2) that defaults to color blue.","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"Let us define a new plot command, called berplot, that allows us to do this.","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"using Gaston # hide\nset(reset=true) # hide\nset(termopts=\"size 550,325 font 'Consolas,11'\") # hide\nfunction berplot(snr, ber, axes::Axes = Axes() ; ser = false, args...)\n\n    # support an optional Boolean argument to control the y label\n    ylab = \"'Bit Error Rate'\"\n    if ser\n        ylab = \"'Symbol Error Rate'\"\n    end\n\n    # Build the default axes configuration\n    a = Axes(title  = \"'BER as a function of SNR'\",\n             xlabel = \"'E_b/N_0 (dB)'\",\n             ylabel = ylab,  # use the label specified by ser\n             axis   = \"semilogy\",\n             grid   = \"on\",\n             ytics  = \"out format '10^{%T}'\"\n            )\n\n    # Execute the plot command with the default curve configuration. Note that\n    # the default axes configuration is merged with the one provided by the\n    # user, giving preference to the latter.\n    plot(snr, ber, Gaston.merge(a, axes) ;\n         w = :lp,\n         lc = :blue,\n         lw = 2,\n         marker = \"fdmd\",\n         args...\n        )\nend","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"Let us try it out:","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"using SpecialFunctions\nQ(x) = 0.5erfc(x/sqrt(2))\nsnr = 3:15\nsnr_dB = 10log10.(snr)\nber = 4Q.(sqrt.(snr))\nberplot(snr_dB, ber)","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"Let us verify that we can control the y label:","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"berplot(snr_dB, ber, ser = true)","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"And verify that we can override the defaults:","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"berplot(snr_dB, ber, Axes(grid = \"xtics mytics\"), lc = :orange)","category":"page"},{"location":"extending/#Plotting-a-new-type-1","page":"Extending Gaston","title":"Plotting a new type","text":"","category":"section"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"As an example, let us extend plot to display the frequency and phase response of a filter designed with DSP.jl. The idea is to plot magnitude and phase responses in two subplots, Matlab-style.","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"using DSP, FFTW\n\nfs = 200.\ndf = digitalfilter(Lowpass(50, fs=fs), Chebyshev1(21, 0.5))\ntypeof(df)","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"We cannot run plot(df) directly, since neither Gaston nor gnuplot know what to do with data of this type.. We need to extend plot to type ZeroPoleGain, wee can also define a default plot configuration.","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"# We need to explicitly import plot, since we're extending it.\nimport Gaston.plot\n\nfunction plot(x::ZeroPoleGain, axes::Axes = Axes() ; fs = π, n = 250, args...)\n    # The filter's frequency response is obtained with freqz.\n    f = range(0, fs/2, length = n)\n    fz = freqz(x, f, fs)\n    mg = abs.(fz)\n    ph = angle.(fz)\n\n    # magnitude plot\n    a = Axes(title = \"'Magnitude response'\",\n             grid = :on,\n             xlabel = \"'Frequency'\",\n             ylabel = \"'Magnitude'\")\n    p1 = plot(f, mg, merge(a, axes) ; handle = Gaston.nexthandle(), args...)\n\n    # phase plot\n    a = Axes(title = \"'Phase response'\",\n             grid = :on,\n             xlabel = \"'Frequency'\",\n             ylabel = \"'Phase'\")\n    p2 = plot(f, ph, merge(a, axes) ; handle = Gaston.nexthandle(), args...)\n\n    plot([p1 ; p2])\n\nend","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"Note that, when creating plots for the magnitude and phase response, the function Gaston.nexthandle() is used to select a new, unused handle. The reason is that plot overwrites the last created plot. So, when defining p1 we run the risk of overwriting the last plot the user created, and when defining p2 we run the risk of overwriting p1. These are avoided by choosing handles that are not shared with any other plots.","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"Let us test it:","category":"page"},{"location":"extending/#","page":"Extending Gaston","title":"Extending Gaston","text":"set(termopts = \"size 550, 600 font 'Consolas,11'\")  # hide\nplot(df, fs=fs)","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Author = \"Miguel Bazdresch\"","category":"page"},{"location":"introduction/#Introduction-to-plotting-1","page":"Introduction to plotting","title":"Introduction to plotting","text":"","category":"section"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Gaston supports essentially all 2-D plots styles that gnuplot is capable of, including regular function plots, plots with logarithmic axes, scatter, stem and step plots, bar plots and histograms, images, etcetera.","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"It can also create 3-D plots, including wireframe, surface, scatter and contour plots.","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"This section presents the basic usage of plot and plot!. Examples of specific plot types, such as cloud points, stem plots, and images, are presented in 2-D plotting tutorial. For 3-D plots, see 3-D plotting tutorial.","category":"page"},{"location":"introduction/#plot-and-plot!-commands-1","page":"Introduction to plotting","title":"plot and plot! commands","text":"","category":"section"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"The main 2-D plotting commands are plot and plot!. To plot a vector y against a vector x, use plot(x,y):","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"using Gaston # hide\nset(reset=true) # hide\nset(termopts=\"size 550,325 font 'Consolas,11'\") # hide\nt = 0:0.01:1\nplot(t, sin.(2π*5*t),\n     linecolor  = :coral,\n     Axes(title = :First_Plot)\n     )","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"To add a second curve, use plot!:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"plot!(t, cos.(2π*5*t),\n      plotstyle = \"linespoints\",\n      pointtype = \"ecircle\",\n      linecolor = \"'blue'\")","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Curves are added to a figure one by one; the first curve is plotted with plot, and the rest with succesive plot! commands.","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"The commands plot and plot! take three kinds of arguments:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Data, in the form of vectors x, y, etcetera.\nConfiguration related to the data's appearance: line color, line width, markers, line style, etcetera. These are passed to plot as regular arguments (for example, linecolor = :coral above).\nConfiguration related to the entire figure: title, tics, ranges, grid, etcetera. These must be wrapped in Axes(); for example, Axes(title = :First_Plot). Only plot accepts these arguments.","category":"page"},{"location":"introduction/#Figure-and-curve-configuration-1","page":"Introduction to plotting","title":"Figure and curve configuration","text":"","category":"section"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"An example can be worth a thousand words. The following commands are all exactly equivalent:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"plot(t, sin.(2π*5*t),\n     with       = \"linespoints\",\n     linecolor  = :coral,\n     Axes(title = :First_Plot,\n          xtics = \"(0.25, 0.5, 0.75)\")\n     )","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"plot(t, sin.(2π*5*t),\n     curveconf = \"with linespoints linecolor 'coral'\",\n     Axes(title = :First_Plot,\n          xtics = \"(0.25, 0.5, 0.75)\")\n     )","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"A = Axes(title = :First_Plot, xtics = \"(0.25, 0.5, 0.75)\")\nplot(t, sin.(2π*5*t), A,\n     plotstyle = :linespoints,\n     lc  = \"'coral'\"\n    )","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"plot(t, sin.(2π*5*t),\n     curveconf = \"w lp lc 'coral'\",\n     Axes(axesconf = \"\"\"set title 'First Plot'\n                        set xtics (0.25, 0.5, 0.75)\"\"\")\n    )","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"plot(t, sin.(2π*5*t),\n     curveconf = \"w lp lc 'coral'\",\n     Axes(axesconf = \"set title 'First Plot'\",\n          xtics = \"(0.25, 0.5, 0.75)\")\n    )","category":"page"},{"location":"introduction/#How-arguments-are-handled-1","page":"Introduction to plotting","title":"How arguments are handled","text":"","category":"section"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Gaston has a few rules to handle arguments, and supports special syntax to make passing commands to gnuplot more convenient. All configuration commands are given as key-value arguments.","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Values can be given in quotes (\"'red'\") or as symbols (:red).\nValues in quotes are passed directly to gnuplot.\nSymbol values are passed to gnuplot wrapped in single quotes. For example, linecolor = :blue in the example above is translated as linecolor 'blue'.\nIn symbols, underscores are converted to spaces. For example, title = :First_Plot is translated as set title 'First Plot'.\nWhen an argument is a vector, each element is handled as a separate argument. For example, xtics = [1:2:5, \"reverse\"] is translated to two separate gnuplot commands, set xtics 1, 2, 5 and set xtics reverse.\nTo send a set command without options, like set grid, use (for example) grid = :on (or \"on\", or true).\nTo send an unset command, use (for example) tics = :off (or \"off\", or false).","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"info: Interaction with gnuplot\nKeyword arguments wrapped in Axes() are converted to gnuplot set commands. For example,Axes(pm3d = \"lighting primary 0.5\")is sent to gnuplot asset pm3d lighting primary 0.5Other keyword arguments are used as plot elements; for example,w = :lp, u = \"1:3\"is sent to gnuplot asplot 'filename' w lp u 1:3","category":"page"},{"location":"introduction/#Configuring-a-figure's-appearance-1","page":"Introduction to plotting","title":"Configuring a figure's appearance","text":"","category":"section"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"As explained above, a figure's configuration is given as key-value pairs wrapped in Axes(). Some arguments have special syntax for convenience:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"The axis argument sets the axis type:\naxis = \"semilogx\" →  set logscale x\naxis = \"semilogy\" →  set logscale y\naxis = \"semilogz\" →  set logscale z\naxis = \"loglog\" →  set logscale xyz\nTics are set with xtics, ytics, ztics or tics:\ntics = a:b:c →  set tics a, b, c\ntics = (a:b:c, [\"l1\" \"l2\" ... \"lN\"])  →  set tics (\"l1\", a, ..., \"lN\", c)\ntics = ([t1 t2 ... tN], [\"l1\" \"l2\" ... \"lN\"])  →  set tics (\"l1\", t1, ..., \"lN\", tN)","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"In the last two cases, the first element in the tuple represents the numerical tics, and the second element is the set of labels.","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Example:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"plot(t, sin.(2π*5*t),\n     linecolor  = :coral,\n     Axes(title = \"'Tics Example'\",\n          xtics = [(0.25:0.5:1, [\"1/4\" \"3/4\"]), \"rotate\"])\n    )","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Ranges are specified with xrange, yrange, zrange or cbrange:\n{x,y,z,cb}range = (low, high) → set {x,y,z,cb}range [low|high]\n{x,y,z,cb}range = (-Inf, high) → set {x,y,z,cb}range [*|high]\n{x,y,z,cb}range = (low, Inf) → set {x,y,z,cb}range [low|*]","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Example:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"plot(t, sin.(2π*5*t),\n     linecolor  = :coral,\n     Axes(title = :Range_Example,\n          yrange = (-Inf, 2))\n    )","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"A set of linetypes with the colors specified by a palette from ColorSchemes.jl. The palette name must be specified as a symbol. For example,","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"t = range(-2, 2, length = 100)\nf(t, σ) = exp.(-σ*abs.(t))\nA = Axes(title = :Linetypes_Example, linetype = :sunset)\nplot(t, f(t,0.5), lw = 3, A)\nplot!(t, f(t, 1), lw = 3)\nplot!(t, f(t, 1.5), lw = 3)\nplot!(t, f(t, 2), lw = 3)\nplot!(t, f(t, 2.5), lw = 3)","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"A string containing gnuplot commands may be passed as argument axesconf. This string is sent to gnuplot without modification.\nIn addition, a string of gnuplot commands may be specified using Gaston's configuration setting preamble. This string will be used in all subsequent plots, before the commands specified in Axes(). This may be useful to configure gnuplot in environments where it is not feasible to have a permanent gnuplot configuration file. For example,","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"set(preamble = \"set offsets graph .05, graph .05, graph .05, graph .05\")","category":"page"},{"location":"introduction/#Configuring-a-curve's-appearance-1","page":"Introduction to plotting","title":"Configuring a curve's appearance","text":"","category":"section"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"All key-value arguments provided to plot and not wrapped in Axes() are interpreted as a curve configuration. Some of them have offer some convenient syntax:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"The plot style can be specified with the with key. The keys with, w and plotstyle are synonyms.\nThe point type is specified with the key pointtype. This key is synonym with pt and marker. Gnuplot accepts markers specified as numbers. In addition, Gaston accepts the following descriptive strings:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Value Meaning\n\"dot\" Single pixel\n\"+\" A plus sign\n\"x\" A cross\n\"*\" An asterisk\n\"ecircle\" Empty circle\n\"fcircle\" Full circle\n\"esquare\" Empty square\n\"fsquare\" Full square\n\"etrianup\" Empty up triangle\n\"ftrianup\" Full up triangle\n\"etriandn\" Empty down triangle\n\"ftriandn\" Full down triangle\n\"edmd\" Empty diamond\n\"fdmd\" Full diamond","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Other strings are passed to gnuplot wrapped in single quotes; for example, pt = \"λ\" is translated as pointtype 'λ'.","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"A legend can be specified with the keys legend, leg, title or t.\nA full plot specification can be provided with the key curveconf. This overrides all other provided arguments. For example, this plot","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"t = 0:0.05:10pi\nplot(t, cos, w=:lp, leg = :A_sine_wave, marker = \"fdmd\", pi = -20)","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"can equivalently be specified as:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"cc = \"w lp t 'A sine wave' pt 13 pi -20\"\nplot(t, cos, curveconf = cc)","category":"page"},{"location":"introduction/#Data-arguments-1","page":"Introduction to plotting","title":"Data arguments","text":"","category":"section"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Most plotting commands accept data in a few different formats:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"plot(y, args...) assumes that x = 1:length(y)\nplot(x, f::Function, args...) applies function f to x.\nplot(c, args...) where c is complex, plots real(c) vs imag(c).","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"In addition, gnuplot may use additional data to, for example, set a marker's size or color. These are called \"supplementary data\" by Gaston, and are provided to plot using the supp keyword argument. For example,","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"c = rand(30) .+ im*rand(30)\nplot(c, supp = 3abs.(c), w = :p, marker = \"ecircle\", markersize = \"variable\")","category":"page"},{"location":"introduction/#D-plotting-1","page":"Introduction to plotting","title":"3-D plotting","text":"","category":"section"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Gaston and gnuplot are fully capable of plotting surfaces and other kinds of 3-D plots such as contours and heatmaps. See the 3-D plotting tutorial.","category":"page"},{"location":"introduction/#Multiplot-1","page":"Introduction to plotting","title":"Multiplot","text":"","category":"section"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"Multiple plots can be included in the same figure. This is accomplished by calling plot with a matrix made up of other figures. If a matrix elements is nothing, then the corresponding subplot is left empty. An example:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"t = 0.01:0.01:10pi\np1 = plot(t, cos, Axes(title = :Plot_1), handle = 1)\np2 = plot(t, t.^2, Axes(title = :Plot_2), handle = 2)\np4 = plot(t, exp.(-t), Axes(title = :Plot_4), handle = 4)\nplot([p1 p2 ; nothing p4])","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"The handle argument is necessary because a plot command, by default, overwrites the previous plot. See the section on Managing multiple figures for more details on how handles work.","category":"page"},{"location":"introduction/#Saving-plots-1","page":"Introduction to plotting","title":"Saving plots","text":"","category":"section"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"To save a plot (or \"print\" it, in gnuplot's parlance), use the save command, which requires term and output arguments. Optionally, arguments specifying the font, size, linewidth, and background color may be given. These may be specified in a gnuplot command string with saveopts, which may also be specified in advance using set(saveopts = \"...\"). The following two examples are equivalent:","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"save(term = \"png\",\n     output= \"myfigure.png\",\n     font = \"Consolas,10\",\n     size = \"1280,900\",\n     linewidth = 1,\n     background = \"blue\")","category":"page"},{"location":"introduction/#","page":"Introduction to plotting","title":"Introduction to plotting","text":"save(term = \"png\", output = \"myfigure.png\",\n     saveopts = \"font 'Consolas,10' size 1280,900 lw 1 background 'blue'\")","category":"page"},{"location":"figures/#Managing-multiple-figures-1","page":"Managing multiple figures","title":"Managing multiple figures","text":"","category":"section"},{"location":"figures/#","page":"Managing multiple figures","title":"Managing multiple figures","text":"When using a graphical terminal such as qt or wxt, it is possible to have multiple figures on the screen at one time. Gaston provides a few commands to help manage them.","category":"page"},{"location":"figures/#","page":"Managing multiple figures","title":"Managing multiple figures","text":"Each figure is identified by its handle, which must be an integer larger than zero. Handles don't have to be consecutive. Plotting commands accept an optional handle argument, which directs the plot to the specified figure. For example, in this code:","category":"page"},{"location":"figures/#","page":"Managing multiple figures","title":"Managing multiple figures","text":"t = -5:0.01:5\nplot(t, sin)\nfigure()  # creates a new figure\nplot(t, cos)\nplot!(t, sin.(t).^2, handle = 1)","category":"page"},{"location":"figures/#","page":"Managing multiple figures","title":"Managing multiple figures","text":"the cosine will be plotted in a second figure, while the squared sine will be appended to the first figure.","category":"page"},{"location":"figures/#","page":"Managing multiple figures","title":"Managing multiple figures","text":"figure\nclosefigure\ncloseall","category":"page"},{"location":"figures/#Gaston.figure","page":"Managing multiple figures","title":"Gaston.figure","text":"figure(handle::Int = 0) -> Int\n\nSelect a figure with the specified handle, or with the next available handle if none is specified. Make the specified figure current. If the figure exists, display it.\n\n\n\n\n\n","category":"function"},{"location":"figures/#Gaston.closefigure","page":"Managing multiple figures","title":"Gaston.closefigure","text":"closefigure(handle::Int...) -> Int\n\nClose one or more figures, specified by their handles.\n\nIf no arguments are given, the current figure is closed.\n\nReturns a handle to the current figure.\n\n\n\n\n\n","category":"function"},{"location":"figures/#Gaston.closeall","page":"Managing multiple figures","title":"Gaston.closeall","text":"closeall() -> Int\n\nCloses all existing figures. Returns the number of closed figures.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"Author = \"Miguel Bazdresch\"","category":"page"},{"location":"#Gaston.jl-1","page":"Home","title":"Gaston.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Gaston (source code here) is a Julia package for plotting. It provides an interface to gnuplot, a mature, powerful, and actively developed plotting package available on all major platforms.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Gaston emphasizes easy and fast plotting on the screen, notebook or IDE. Knowledge of gnuplot is not required, but some familiarity is beneficial. Gaston also exposes the full power of gnuplot, for more expert users.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using Gaston, SpecialFunctions\nset(reset=true) # hide\nset(termopts=\"size 550,325 font 'Consolas,11'\") # hide\nx = y = 0:0.075:10\nsurf(x, y, (x,y) -> besselj0(y)*x^2, with = \"pm3d\",\n     Axes(view = (45, 45),\n          pm3d = \"lighting primary 0.5 specular 0.4\",\n          key = :off)\n     )","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image inspired by What's new in gnuplot 5.2?)","category":"page"},{"location":"#Gaston-features-1","page":"Home","title":"Gaston features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Plot using graphical windows, and keeping multiple plots active at a time, with mouse interaction. A browser is not required to show plots.\nPlot also directly to the REPL, using text (ASCII) or sixels.\nPlot in Jupyter, Juno or VS Code.\n\"Recipes\" to generate common 2-D and 3-D plots, such as stem plots, histograms, images, surfaces, contour and heatmaps.\nEasy definition of custom plotting commands for specific types, or with specific defaults.\nSave plots to multiple formats, including pdf, png and svg.\nColor palettes from ColorSchemes.jl.\nExport plots for integration into Latex documents.\nA simple interface to almost the full power of gnuplot, for users who have more experience with it.\nFast first plot: load package, plot, and save to pdf in less than six seconds. Subsequent plots take a few hundreds of milliseconds.\nA simple interface to manage multiple plots, using commands such as figure(), closeall(), etc.","category":"page"},{"location":"#Gaston-and-Gnuplot.jl:-two-philosophies-1","page":"Home","title":"Gaston and Gnuplot.jl: two philosophies","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Gnuplot.jl is another front-end for gnuplot, with comparable capabilities to Gaston. An example serves to illustrate the differences in how the two packages approach the interface problem. Consider this example plot:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"x = 1:0.1:10\n@gp    \"set grid\" \"set key left\" \"set logscale y\"\n@gp :- \"set title 'Plot title'\" \"set label 'X label'\" \"set xrange [0:*]\"\n@gp :- x x.^0.5 \"w l tit 'Pow 0.5' dt 2 lw 2 lc rgb 'red'\"\n@gp :- x x      \"w l tit 'Pow 1'   dt 1 lw 3 lc rgb 'blue'\"\n@gp :- x x.^2   \"w l tit 'Pow 2'   dt 3 lw 2 lc rgb 'purple'\"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This shows that Gnuplot.jl essentially allows one to write gnuplot commands directly in Julia. The same plot in Gaston would be:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"x = 1:0.1:10\nplot(x, x.^0.5,\n     w = \"l\",\n     legend = \"'Pow 0.5'\",\n     dt = 2,\n     lw = 2,\n     lc = :red,\n     Axes(grid = :on,\n          key = \"left\",\n          axis = \"semilogy\"))\nplot!(x, x,\n      w = :l,\n      leg = :Pow_1,\n      dt = 1,\n      lw = 3,\n      lc = :blue)\nplot!(x, x.^2,\n      curveconf = \"w l tit 'Pow 2' dt 3 lw 2 lc 'purple'\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In summary, Gaston offers a function-based interface, and gnuplot commands can be specified in a few different ways, with convenient notation, such as the optional use of \"legend\" instead of gnuplot's \"title\", symbols to avoid typing quote marks (\") all the time, and others that are described later in this document.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Gaston requires Julia version 1.3.0 or above, and requires Gnuplot version 5.0 or above (version 5.2.8 is recommended). You should install gnuplot on your system prior to using Gaston. On Linux, it is highly recommended that you select a version with support for Qt: on Debian and Ubuntu, you will need gnuplot-qt.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To install Gaston from the Julia REPL, run","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> ]add Gaston","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Typing ] switches the Julia REPL to the package manager, and the add command installs the package. To exit the package manager, hit the backspace key.","category":"page"},{"location":"#Gnuplot-configuration-1","page":"Home","title":"Gnuplot configuration","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Gaston respects user configuration settings in gnuplot's startup file. Left un-configured, gnuplot's plots are less than attractive. The following minimum configuration is suggested (and was used to generate the plots in this document):","category":"page"},{"location":"#","page":"Home","title":"Home","text":"set linetype 1 lc rgb \"blue\" pt 3\nset linetype 2 lc rgb \"red\" pt 4\nset linetype 3 lc rgb \"green\" pt 6\nset linetype 4 lc rgb \"black\" pt 12\nset linetype 5 lc rgb \"blue\" pt 5\nset linetype 6 lc rgb \"red\" pt 1\nset linetype 7 lc rgb \"green\" pt 2\nset linetype 8 lc rgb \"black\" pt 7\nset linetype cycle 8\nset style data lines\nset key noautotitle\nset auto fix\nset offsets graph .05, graph .05, graph .05, graph .05","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The configuration file is ~/.gnuplot in Unix-like systems, and %APPDATA%\\GNUPLOT.INI in Windows.","category":"page"},{"location":"#Next-steps-1","page":"Home","title":"Next steps","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Load Gaston into your Julia session with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using Gaston","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Introduction to plotting has more information about basic use and configuration.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"There is a 2-D plotting tutorial and a 3-D plotting tutorial.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Extending Gaston section explains how to extend Gaston by creating your own \"recipes\", both for specific kinds of plots, and for plotting data of specific types.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"There is a section on  Managing multiple figures and all related commands.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The 2-D Gallery and 3-D Gallery show many plotting examples.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Usage notes and FAQ section includes additional usage examples and answers frequent questions.","category":"page"},{"location":"#Gnuplot-resources-1","page":"Home","title":"Gnuplot resources","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"These websites have more information on gnuplot and how to use it:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Official website\nOfficial demo gallery\nPDF documentation for 5.2\nA good blog on gnuplot","category":"page"},{"location":"#Running-tests-1","page":"Home","title":"Running tests","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Gaston includes an extensive test suite, which can executed with:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> ]test Gaston","category":"page"},{"location":"#","page":"Home","title":"Home","text":"All tests should pass (but a few may be skipped).","category":"page"},{"location":"#Support-1","page":"Home","title":"Support","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Please post support questions to Julia's discuss forum.","category":"page"},{"location":"#Contributing-1","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Bug reports, suggestions and pull requests are welcome at Gaston's github page","category":"page"},{"location":"faq/#Usage-notes-and-FAQ-1","page":"Usage Notes and FAQ","title":"Usage notes and FAQ","text":"","category":"section"},{"location":"faq/#How-to-set-the-terminal-1","page":"Usage Notes and FAQ","title":"How to set the terminal","text":"","category":"section"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"Gnuplot supports a huge amount of terminals. Most modern gnuplot installations should support the qt terminal. A different terminal can be selected with","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"set(term = t::String)","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"where newterm is the desired terminal. Most terminals accept a configuration string, which can be set with","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"set(termopts = opt::String)","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"For example, to set the font on the qt terminal to Consolas size 11, one could do","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"set(term = \"qt\")  # not needed in most installations\nset(termpts = \"font 'Consolas,11')","category":"page"},{"location":"faq/#What-settings-are-available-in-Gaston?-1","page":"Usage Notes and FAQ","title":"What settings are available in Gaston?","text":"","category":"section"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"The set command can be used to configure Gaston's behavior. The following settings are available:","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"Setting Purpose\nterm Sets gnuplot's terminal.\ntermopts Sets the terminal's options.\nmode If set to \"null\", plots are not shown.\npreamble A string that is sent to gnuplot for every plot.\ndebug If set to true, all data sent to gnuplot is printed on the screen.\nsaveopts A string that specifies options when saving a plot.\nshowable For IJulia, Documenter.jl, Juno and similar uses. Defaults to \"png\"; all plots are generated in PNG format only. Set to \"svg\" to enable SVG plots, or \"png+svg\" to enable both.\ntimeout How long Gaston waits for gnuplot to complete a plot. Defaults to 10 seconds (20 on Windows and Mac); you may need to set it higher if your computer is slow or you're plotting lots of data.","category":"page"},{"location":"faq/#How-to-plot-text-or-sixels?-1","page":"Usage Notes and FAQ","title":"How to plot text or sixels?","text":"","category":"section"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"Plots can be rendered using text on the console by setting the terminal to dumb:","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"using Gaston  # hide\nset(reset=true)  # hide\nset(term = \"dumb\", termopts = \"size 80,25 ansirgb\")\nt = -5:0.1:5\nplot(t, sin);\nplot!(t, cos)","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"(Image: )","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"To plot with sixels, use","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"set(term = \"sixelgd\")","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"A terminal that supports sixels is required (for example, xterm in mode vt340 (invoked as xterm -ti vt340).","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"(Image: )","category":"page"},{"location":"faq/#How-to-configure-plot-size-in-Documenter.jl,-IJulia,-etc?-1","page":"Usage Notes and FAQ","title":"How to configure plot size in Documenter.jl, IJulia, etc?","text":"","category":"section"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"In these environments, the front-end chooses among all supported MIME types. Gaston supports PNG and SVG images. Some of these front-ends, though, ask Gaston to produce plots in both formats, and then choose SVG. This is a waste of resources, and combined with the fact that plots in SVG format can grow very large, it is recommeded to configure Gaston to produce only PNG files. This is achieved with","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"set(ijulia = \"png\")","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"The png terminal can be configured with","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"set(termopts=...)","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"For example, the plots in this document are created with these settings:","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"set(termopts=\"size 550,325 font 'Consolas,11'\")","category":"page"},{"location":"faq/#I-run-plot-inside-a-for-loop-and-no-plots-are-produced!-(or:-Julia's-display-system)-1","page":"Usage Notes and FAQ","title":"I run plot inside a for loop and no plots are produced! (or: Julia's display system)","text":"","category":"section"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"Julia separates the calculation of a result from the display of the result (see custom pretty-printing and multimedia I/O in Julia's documentation). This mechanism is very powerful; in Gaston, it enables plotting to the REPL, Jupyter, Juno, or in Documenter.jl with just a few lines of code. In other words, plotting is not a side effect of running plot, the way it is in, say, Matlab; rather, a plot is produced when a result of type Gaston.Figure is returned by some code.","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"While elegant and powerful, this mechanism can also be surprising if you're used to side-effect plotting. None of the following code samples display any plots:","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"y = rand(20)\nplot(y);  # note the final ; suppreses displaying the result","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"# nothing is returned by the for loop\nfor k = 1:5\n    plot(k*y)\nend","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"# function that does not return a figure\nfunction f(y)\n    plot(sin.(y))\n    println(\"Sum = $(sum(y))\")\nend","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"The common problem in the code samples above is that a figure is never returned; in consequence, no figure is displayed. This can be fixed by making sure your code returns a figure; or alternatively, save the figure in a variable and display it when it is convenient. For example:","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"p = Gaston.Figure[]\nfor k = 1:5\n    push!(p, plot(k*y))\nend","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"Now, p[3] returns the third plot (for example). Another way to force the figure to be rendered is to call display():","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"# all five figures are displayed\ncloseall()\nfor k = 1:5\n    figure()\n    display(plot(k*y))\nend","category":"page"},{"location":"faq/#How-does-gnuplot-report-errors?-1","page":"Usage Notes and FAQ","title":"How does gnuplot report errors?","text":"","category":"section"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"Gnuplot's main drawback, from a usability standpoint, is that it is not a library; it is designed to be used interactively. Gaston simulates a user typing interactive commands in a gnuplot session. Gaston tries to catch any errors reported back by gnuplot.","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"An example of an error returned by gnuplot and caught by Gaston:","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"using Gaston # hide\ny = rand(20)\nplot(y, plotstyle=\"linepoints\")  # missing an 's'","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"results in an error message like:","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"┌ Warning: Gnuplot returned an error message:\n│\n│ gnuplot> plot '/tmp/jl_d8yIs9' i 0  with linepoints\n│                                                     ^\n│          line 0: unrecognized plot type\n│\n└ @ Gaston ~/.julia/dev/Gaston/src/gaston_llplot.jl:172","category":"page"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"Gaston does its best effort to read and display any warnings or errors produced by gnuplot, and to recover gracefully. In some corner cases, it might happen that the communication link enters an unforeseen state and a restart is required. Please file a Gaston issue if you experience this.","category":"page"},{"location":"faq/#Support-1","page":"Usage Notes and FAQ","title":"Support","text":"","category":"section"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"Please post support questions to Julia's discuss forum.","category":"page"},{"location":"faq/#Contributing-1","page":"Usage Notes and FAQ","title":"Contributing","text":"","category":"section"},{"location":"faq/#","page":"Usage Notes and FAQ","title":"Usage Notes and FAQ","text":"Bug reports, suggestions and pull requests are welcome at Gaston's github page","category":"page"},{"location":"3d-gallery/#threedeegal-1","page":"3-D Plots","title":"3-D Gallery","text":"","category":"section"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"(Many of these examples taken from, or inspired by, @lazarusa's amazing gallery)","category":"page"},{"location":"3d-gallery/#Interlocking-Tori-1","page":"3-D Plots","title":"Interlocking Tori","text":"","category":"section"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"using Gaston # hide\nset(reset=true) # hide\nset(termopts=\"size 500,500 font 'Consolas,11'\") # hide\nU = LinRange(-pi, pi, 100)\nV = LinRange(-pi, pi, 20)\nx = [cos(u) + .5 * cos(u) * cos(v)      for u in U, v in V]\ny = [sin(u) + .5 * sin(u) * cos(v)      for u in U, v in V]\nz = [.5 * sin(v)                        for u in U, v in V]\nsurf(x', y', z',\n     w = :pm3d,\n     Axes(palette = :dense,\n          pm3d = \"depthorder\",\n          colorbox = :off,\n          key = :false,\n          tics = :false,\n          border = 0,\n          view = \"60, 30, 1.5, 0.9\",\n          style = \"fill transparent solid 0.7\"))\nx = [1 + cos(u) + .5 * cos(u) * cos(v)  for u in U, v in V]\ny = [.5 * sin(v)                        for u in U, v in V]\nz = [sin(u) + .5 * sin(u) * cos(v)      for u in U, v in V]\nsurf!(x', y' ,z' , w = :pm3d)","category":"page"},{"location":"3d-gallery/#Fill-a-curve-in-3-D-1","page":"3-D Plots","title":"Fill a curve in 3-D","text":"","category":"section"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"set(saveopts=\"size 550,325 font 'Consolas,11'\") # hide\nx = 0.:0.05:3;\ny = 0.:0.05:3;\nz = @. sin(x) * exp(-(x+y))\nsurf(x, y, z, supp = [z.*0 z], curveconf = \"w zerror t 'Data'\", lw = 3,\n     Axes(xlabel = :X, ylabel = :Y,\n          linetype = :Set1_5,\n          style = \"fill transparent solid 0.3\",\n          xyplane = \"at 0\",\n          grid = :on)\n    )\nsurf!(x.*0, y, z, w = :l, lw = 3)\nsurf!(x, y.*0, z, w = :l, lw = 3)","category":"page"},{"location":"3d-gallery/#Variable-marker-size-and-color-1","page":"3-D Plots","title":"Variable marker size and color","text":"","category":"section"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"x = 0:0.1:6π;\nscatter3(x, cos.(x), sin.(x), supp = x./10,\n         ps = \"variable\", pt = \"fcircle\", lc = \"palette\",\n         Axes(colorbox = :off))","category":"page"},{"location":"3d-gallery/#Surface-with-contours-1","page":"3-D Plots","title":"Surface with contours","text":"","category":"section"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"x = y = -10:0.5:10\nf1 = (x,y) -> cos.(x./2).*sin.(y./2)\nsurf(x, y, f1,\n     lc = :turquoise,\n     Axes(hidden3d = :on,\n          contour = \"base\",\n          cntrparam = \"levels 10\",\n          key = :off))","category":"page"},{"location":"3d-gallery/#Egg-shaped-contours-1","page":"3-D Plots","title":"Egg-shaped contours","text":"","category":"section"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"x = -1:0.05:1\ny = -1.5:0.05:2\negg(x,y) = x^2 + y^2/(1.4 + y/5)^2\nsegg = [egg(x,y) for x in x, y in y]\ncontour(x, y, segg', labels = false,\n        curveconf = \"w l lc palette\",\n        Axes(palette = :cool,\n             cntrparam = \"levels incremental 0,0.01,1\",\n             auto = \"fix\",\n             xrange = (-1.2, 1.2),\n             yrange = (-1.5, 2),\n             cbrange = (0, 1),\n             xlabel = :x,\n             ylabel = :y,\n             size=\"ratio -1\"))","category":"page"},{"location":"3d-gallery/#Tubes-1","page":"3-D Plots","title":"Tubes","text":"","category":"section"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"U  = LinRange(0,10π, 80)\nV = LinRange(0,2π, 20)\nx = [(1-0.1*cos(v))*cos(u) for u in U, v in V]\ny = [(1-0.1*cos(v))*sin(u) for u in U, v in V]\nz = [0.1*(sin(v) + u/1.7 - 10) for u in U, v in V]\nsurf(x, y, z, w=\"pm3d\",\n     Axes(pm3d = \"depthorder\",\n     style = \"fill transparent solid 0.7\",\n     view = \"equal xyz\",\n     xyplane = -0.05,\n     palette = :ice,\n     xrange = (-1.2, 1.2),\n     yrange = (-1.2, 1.2),\n     colorbox = :off))","category":"page"},{"location":"3d-gallery/#Spheres-1","page":"3-D Plots","title":"Spheres","text":"","category":"section"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"Θ = LinRange(0, 2π, 100) # 50\nΦ = LinRange(0, π, 20)\nr = 0.8\nx = [r * cos(θ) * sin(ϕ)      for θ in Θ, ϕ in Φ]\ny = [r * sin(θ) * sin(ϕ)      for θ in Θ, ϕ in Φ]\nz = [r * cos(ϕ) for θ in Θ, ϕ in Φ]\nsurf(x, y, z, w = :l, lc = :turquoise,\n     Axes(view = \"equal xyz\",\n          pm3d = \"depthorder\",\n          hidden3d = :on))","category":"page"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"surf(x, y, z, w = :pm3d,\n     Axes(style = \"fill transparent solid 0.5\",\n     xyplane = 0,\n     palette = :summer,\n     view = \"equal xyz\",\n     pm3d = \"depthorder\"))","category":"page"},{"location":"3d-gallery/#Torus-1","page":"3-D Plots","title":"Torus","text":"","category":"section"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"U  = LinRange(-π,π, 50)\nV = LinRange(-π,π, 100)\nr = 0.5\nx = [1 + cos(u) + r * cos(u) * cos(v)  for u in U, v in V]\ny = [r * sin(v)                        for u in U, v in V]\nz = [sin(u) + r * sin(u) * cos(v)      for u in U, v in V]\naxesconf = \"\"\"set object rectangle from screen 0,0 to screen 1,1 behind fillcolor 'black' fillstyle solid noborder\n              set pm3d depthorder\n              set style fill transparent solid 0.5\n              set pm3d lighting primary 0.05 specular 0.2\n              set view 108,2\n              unset border\n              set xyplane 0\n              unset tics\n              unset colorbox\"\"\"\nsurf(x, y, z, w = :pm3d, Axes(palette = :cool, axesconf = axesconf))","category":"page"},{"location":"3d-gallery/#Animation-1","page":"3-D Plots","title":"Animation","text":"","category":"section"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"closeall()  # hide\nz=0:0.1:10pi;\nstep = 5;\ncc = \"w l lc 'turquoise' lw 3 notitle\"\nac = Axes(zrange = (0,30), xrange = (-1.2, 1.2), yrange = (-1.2, 1.2),\n          tics = :off,\n          xlabel = :x, ylabel = :y, zlabel = :z)\nF = scatter3(cos.(z[1:step]), sin.(z[1:step]), z[1:step], curveconf = cc, ac);\nfor i = 2:60\n    pi = scatter3(cos.(z[1:i*step]), sin.(z[1:i*step]), z[1:i*step],\n                  curveconf = cc, ac, handle = 2);\n    push!(F, pi)\nend\nfor i = 60:-1:1\n    pi = scatter3(cos.(z[1:i*step]), sin.(z[1:i*step]), z[1:i*step],\n                  curveconf = cc, ac, handle = 2);\n    push!(F, pi)\nend\nsave(term=\"gif\", saveopts = \"animate size 600,400 delay 1\", output=\"anim3d.gif\", handle=1)","category":"page"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"(Image: )","category":"page"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"closeall() # hide\nx = y = -15:0.4:15\nac = Axes(title = :Sombrero_Surface,\n          palette  = :cool,\n          cbrange  = (-0.2, 1),\n          zrange   = (-0.3, 1),\n          hidden3d = :on)\nF = surf(x, y, (x,y) -> (@. sin(sqrt(x*x+y*y))/sqrt(x*x+y*y)),\n         ac, w = :pm3d);\nfor i = 1:-0.1:-1\n    pi = surf(x, y, (x,y) -> (@. i*sin(sqrt(x*x+y*y))/sqrt(x*x+y*y)),\n              ac, w = :pm3d, handle = 2);\n    push!(F, pi)\nend\nfor i = -0.9:0.1:1\n    pi = surf(x, y, (x,y) -> (@. i*sin(sqrt(x*x+y*y))/sqrt(x*x+y*y)),\n              ac, w = :pm3d, handle = 2);\n    push!(F, pi)\nend\nsave(term = \"gif\", saveopts = \"animate size 600,400 delay 1\",\n     output = \"anim3db.gif\", handle=1)","category":"page"},{"location":"3d-gallery/#","page":"3-D Plots","title":"3-D Plots","text":"(Image: )","category":"page"}]
}
